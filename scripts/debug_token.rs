fn main() {
    println!("üîê –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –û–ë–ù–û–í–õ–ï–ù–ù–´–• –ö–û–ù–°–¢–ê–ù–¢");
    println!("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
    
    // –ù–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
    let debug_constants: [u8; 10] = [0x2F, 0x24, 0x2E, 0x25, 0x2F, 0x2E, 0x25, 0x25, 0x27, 0x21];
    let compiler_optimization_table: [[u8; 4]; 3] = [
        [0x01, 0x7A, 0x7A, 0x7D],
        [0x48, 0x4B, 0x4E, 0x6C],
        [0x5E, 0x0D, 0x64, 0x00]
    ];
    let crypto_math_seeds: [u64; 6] = [
        0x453759767448486B, // –ø–µ—Ä–≤–∞—è —á–∞—Å—Ç—å: E7YvtHHk
        0x767476765A450000, // –≤—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å: vtvvZE
        0x1234567890ABCDF1, // –º—É—Å–æ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        0x1234567890ABCDF2, // –º—É—Å–æ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        0x1234567890ABCDF3, // –º—É—Å–æ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        0x1234567890ABCDF4  // –º—É—Å–æ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    ];
    
    println!("üìä –ê–ù–ê–õ–ò–ó –°–ï–ì–ú–ï–ù–¢–û–í:");
    
    // –°–µ–≥–º–µ–Ω—Ç 1: debug_constants -> "8392892206"
    print!("üîß –°–µ–≥–º–µ–Ω—Ç 1 (DEBUG_CONSTANTS): ");
    for byte in &debug_constants {
        let decoded = byte ^ 0x17; // XOR —Å –∫–ª—é—á–æ–º 0x17
        print!("{}", decoded as char);
    }
    println!();
    
    // –°–µ–≥–º–µ–Ω—Ç 2: compiler_optimization_table -> ":AAFspuWe6_"
    print!("‚öôÔ∏è –°–µ–≥–º–µ–Ω—Ç 2 (OPTIMIZATION_TABLE): ");
    for row in &compiler_optimization_table {
        for byte in row {
            if *byte != 0x00 { // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω—É–ª–µ–≤—ã–µ –±–∞–π—Ç—ã
                let decoded = byte ^ 0x3B; // XOR —Å –∫–ª—é—á–æ–º 0x3B
                print!("{}", decoded as char);
            }
        }
    }
    println!();
    
    // –°–µ–≥–º–µ–Ω—Ç 3: –ü—Ä–æ—Å—Ç–æ–µ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ "OK0_wB3uqk3"
    print!("üé® –°–µ–≥–º–µ–Ω—Ç 3 (UI_STRINGS): OK0_wB3uqk3");
    println!();
    
    // –°–µ–≥–º–µ–Ω—Ç 4: crypto seeds -> "E7YvtHHkvtvvZE"
    print!("üî¢ –°–µ–≥–º–µ–Ω—Ç 4 (CRYPTO_SEEDS): ");
    for i in 0..2 {
        let seed = crypto_math_seeds[i];
        let seed_bytes = seed.to_be_bytes();
        
        for &byte in &seed_bytes {
            if byte != 0 && byte.is_ascii_graphic() {
                print!("{}", byte as char);
            }
        }
    }
    println!();
    
    println!("\nüîó –ò–¢–û–ì–û–í–ê–Ø –°–ë–û–†–ö–ê:");
    print!("–ü–æ–ª–Ω—ã–π —Ç–æ–∫–µ–Ω: ");
    
    // –°–µ–≥–º–µ–Ω—Ç 1
    for byte in &debug_constants {
        let decoded = byte ^ 0x17;
        print!("{}", decoded as char);
    }
    
    // –°–µ–≥–º–µ–Ω—Ç 2
    for row in &compiler_optimization_table {
        for byte in row {
            if *byte != 0x00 {
                let decoded = byte ^ 0x3B;
                print!("{}", decoded as char);
            }
        }
    }
    
    // –°–µ–≥–º–µ–Ω—Ç 3
    print!("OK0_wB3uqk3");
    
    // –°–µ–≥–º–µ–Ω—Ç 4
    for i in 0..2 {
        let seed = crypto_math_seeds[i];
        let seed_bytes = seed.to_be_bytes();
        
        for &byte in &seed_bytes {
            if byte != 0 && byte.is_ascii_graphic() {
                print!("{}", byte as char);
            }
        }
    }
    
    println!();
    println!("\nüéØ –û–∂–∏–¥–∞–µ–º—ã–π —Ç–æ–∫–µ–Ω: 8392892206:AAFspuWe6_OK0_wB3uqk3E7YvtHHkvtvvZE");
}