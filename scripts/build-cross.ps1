# –°–∫—Ä–∏–ø—Ç –¥–ª—è –∫—Ä–æ—Å—Å-–∫–æ–º–ø–∏–ª—è—Ü–∏–∏ –ø–æ–¥ Linux –∏ –¥—Ä—É–≥–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
# –í–ù–ò–ú–ê–ù–ò–ï: –¢—Ä–µ–±—É–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤

Write-Host "üåê –ö—Ä–æ—Å—Å-–∫–æ–º–ø–∏–ª—è—Ü–∏—è Eye Remote Admin Bot –ø–æ–¥ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã..." -ForegroundColor Green
Write-Host ""

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∫—Ä–æ—Å—Å-—Å–±–æ—Ä–æ–∫
$CrossDir = "cross-builds"
if (!(Test-Path $CrossDir)) {
    New-Item -ItemType Directory -Path $CrossDir
}

# –°–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–≤—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
$CrossTargets = @(
    @{Name="x86_64-unknown-linux-gnu"; Description="Linux 64-bit"; Folder="linux-x64"; Extension=""},
    @{Name="i686-unknown-linux-gnu"; Description="Linux 32-bit"; Folder="linux-x86"; Extension=""},
    @{Name="aarch64-unknown-linux-gnu"; Description="Linux ARM64"; Folder="linux-arm64"; Extension=""},
    @{Name="x86_64-apple-darwin"; Description="macOS 64-bit"; Folder="macos-x64"; Extension=""},
    @{Name="aarch64-apple-darwin"; Description="macOS ARM64 (M1/M2)"; Folder="macos-arm64"; Extension=""}
)

Write-Host "‚ö†Ô∏è  –¢–†–ï–ë–û–í–ê–ù–ò–Ø –î–õ–Ø –ö–†–û–°–°-–ö–û–ú–ü–ò–õ–Ø–¶–ò–ò:" -ForegroundColor Yellow
Write-Host "   - Docker Desktop (–¥–ª—è Linux)" -ForegroundColor Yellow
Write-Host "   - Cross compilation tools" -ForegroundColor Yellow
Write-Host "   - –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ GitHub Actions" -ForegroundColor Yellow
Write-Host ""

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Docker
$DockerInstalled = $false
try {
    docker --version | Out-Null
    $DockerInstalled = $true
    Write-Host "‚úÖ Docker –Ω–∞–π–¥–µ–Ω" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" -ForegroundColor Red
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ cross
$CrossInstalled = $false
try {
    cross --version | Out-Null
    $CrossInstalled = $true
    Write-Host "‚úÖ Cross –Ω–∞–π–¥–µ–Ω" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Cross –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" -ForegroundColor Red
    Write-Host "   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: cargo install cross" -ForegroundColor Yellow
}

Write-Host ""

if ($CrossInstalled) {
    Write-Host "üî® –ù–∞—á–∏–Ω–∞–µ–º –∫—Ä–æ—Å—Å-–∫–æ–º–ø–∏–ª—è—Ü–∏—é..." -ForegroundColor Cyan
    
    foreach ($Target in $CrossTargets) {
        $TargetName = $Target.Name
        $Description = $Target.Description
        $Folder = $Target.Folder
        $Extension = $Target.Extension
        
        Write-Host "üî® –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º: $Description" -ForegroundColor Cyan
        
        # –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º —Å –ø–æ–º–æ—â—å—é cross
        $BuildCommand = "cross build --release --target $TargetName"
        Write-Host "   –ö–æ–º–∞–Ω–¥–∞: $BuildCommand" -ForegroundColor Gray
        
        try {
            Invoke-Expression $BuildCommand
            
            if ($LASTEXITCODE -eq 0) {
                # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
                $ArchDir = Join-Path $CrossDir $Folder
                if (!(Test-Path $ArchDir)) {
                    New-Item -ItemType Directory -Path $ArchDir
                }
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞
                $ExeName = "eye$Extension"
                $SourceExe = "target\$TargetName\release\$ExeName"
                $DestExe = Join-Path $ArchDir $ExeName
                
                if (Test-Path $SourceExe) {
                    Copy-Item $SourceExe $DestExe -Force
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                    $FileSize = (Get-Item $DestExe).Length
                    $FileSizeMB = [math]::Round($FileSize / 1MB, 2)
                    
                    Write-Host "   ‚úÖ –£—Å–ø–µ—à–Ω–æ! –†–∞–∑–º–µ—Ä: $FileSizeMB MB" -ForegroundColor Green
                    Write-Host "   üìÅ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: $DestExe" -ForegroundColor Green
                } else {
                    Write-Host "   ‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: $SourceExe" -ForegroundColor Red
                }
            } else {
                Write-Host "   ‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ –¥–ª—è $Description" -ForegroundColor Red
            }
        } catch {
            Write-Host "   ‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è cross –¥–ª—è $Description" -ForegroundColor Red
        }
        
        Write-Host ""
    }
} else {
    Write-Host "‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫—Ä–æ—Å—Å-–∫–æ–º–ø–∏–ª—è—Ü–∏—é (–Ω–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤)" -ForegroundColor Yellow
}

# –°–æ–∑–¥–∞–µ–º GitHub Actions workflow
$WorkflowDir = ".github\workflows"
if (!(Test-Path $WorkflowDir)) {
    New-Item -ItemType Directory -Path $WorkflowDir -Force
}

$WorkflowContent = @"
name: Cross-platform Build

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Build for `${{ matrix.target }}`
    runs-on: `${{ matrix.os }}
    strategy:
      matrix:
        include:
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: windows-x64
          - target: i686-pc-windows-msvc
            os: windows-latest
            name: windows-x86
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: linux-x64
          - target: i686-unknown-linux-gnu
            os: ubuntu-latest
            name: linux-x86
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            name: linux-arm64
          - target: x86_64-apple-darwin
            os: macos-latest
            name: macos-x64
          - target: aarch64-apple-darwin
            os: macos-latest
            name: macos-arm64

    steps:
    - uses: actions/checkout@v3
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: `${{ matrix.target }}
        override: true
    
    - name: Install cross
      if: matrix.os == 'ubuntu-latest'
      run: cargo install cross
    
    - name: Build
      run: |
        if [ "`${{ matrix.os }}" == "ubuntu-latest" ]; then
          cross build --release --target `${{ matrix.target }}
        else
          cargo build --release --target `${{ matrix.target }}
        fi
      shell: bash
    
    - name: Prepare artifacts
      run: |
        mkdir -p artifacts
        if [ "`${{ matrix.os }}" == "windows-latest" ]; then
          cp target/`${{ matrix.target }}/release/eye.exe artifacts/eye-`${{ matrix.name }}.exe
        else
          cp target/`${{ matrix.target }}/release/eye artifacts/eye-`${{ matrix.name }}
        fi
      shell: bash
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: eye-`${{ matrix.name }}
        path: artifacts/*

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          eye-*/eye-*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: `${{ secrets.GITHUB_TOKEN }}
"@

$WorkflowFile = Join-Path $WorkflowDir "cross-build.yml"
$WorkflowContent | Out-File -FilePath $WorkflowFile -Encoding UTF8

Write-Host "üéâ –ö—Ä–æ—Å—Å-–∫–æ–º–ø–∏–ª—è—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞!" -ForegroundColor Green
Write-Host "üìÅ GitHub Actions workflow —Å–æ–∑–¥–∞–Ω: $WorkflowFile" -ForegroundColor Yellow
Write-Host ""
Write-Host "üí° –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–±–æ—Ä–∫–∏:" -ForegroundColor Yellow
Write-Host "   1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∫–æ–¥ –≤ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π" -ForegroundColor Yellow
Write-Host "   2. –°–æ–∑–¥–∞–π—Ç–µ —Ç–µ–≥: git tag v1.0.0 && git push --tags" -ForegroundColor Yellow
Write-Host "   3. GitHub Actions –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—Å—Ç —Å–±–æ—Ä–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º" -ForegroundColor Yellow