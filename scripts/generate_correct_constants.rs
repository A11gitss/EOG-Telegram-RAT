fn main() {
    println!("üîß –ì–ï–ù–ï–†–ê–¢–û–† –ü–†–ê–í–ò–õ–¨–ù–´–• –ö–û–ù–°–¢–ê–ù–¢");
    println!("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");

    // –ß–∞—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞
    let part1 = "8392892206";           // 10 —Å–∏–º–≤–æ–ª–æ–≤
    let part2 = ":AAFspuWe6_";         // 11 —Å–∏–º–≤–æ–ª–æ–≤ 
    let part3 = "OK0_wB3uqk3";         // 11 —Å–∏–º–≤–æ–ª–æ–≤
    let part4 = "E7YvtHHkvtvvZE";      // 14 —Å–∏–º–≤–æ–ª–æ–≤

    println!("üéØ –ß–∞—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞:");
    println!("–ß–∞—Å—Ç—å 1: {}", part1);
    println!("–ß–∞—Å—Ç—å 2: {}", part2);
    println!("–ß–∞—Å—Ç—å 3: {}", part3);
    println!("–ß–∞—Å—Ç—å 4: {}", part4);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —á–∞—Å—Ç–∏ 1
    println!("\nüìä DEBUG_MEMORY_CONSTANTS (XOR —Å 0x17):");
    print!("const DEBUG_MEMORY_CONSTANTS: [u8; 10] = [");
    for (i, byte) in part1.bytes().enumerate() {
        let encoded = byte ^ 0x17;
        print!("0x{:02X}", encoded);
        if i < part1.len() - 1 {
            print!(", ");
        }
    }
    println!("];");

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —á–∞—Å—Ç–∏ 2
    println!("\n‚öôÔ∏è COMPILER_OPTIMIZATION_TABLE (XOR —Å 0x3B):");
    let part2_bytes: Vec<u8> = part2.bytes().collect();
    // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –≥—Ä—É–ø–ø—ã –ø–æ 4 –±–∞–π—Ç–∞
    println!("const COMPILER_OPTIMIZATION_TABLE: [[u8; 4]; 3] = [");
    
    // –ü–µ—Ä–≤–∞—è –≥—Ä—É–ø–ø–∞: 4 –±–∞–π—Ç–∞
    print!("    [");
    for i in 0..4 {
        let encoded = part2_bytes[i] ^ 0x3B;
        print!("0x{:02X}", encoded);
        if i < 3 { print!(", "); }
    }
    println!("],");
    
    // –í—Ç–æ—Ä–∞—è –≥—Ä—É–ø–ø–∞: 4 –±–∞–π—Ç–∞
    print!("    [");
    for i in 4..8 {
        let encoded = part2_bytes[i] ^ 0x3B;
        print!("0x{:02X}", encoded);
        if i < 7 { print!(", "); }
    }
    println!("],");
    
    // –¢—Ä–µ—Ç—å—è –≥—Ä—É–ø–ø–∞: 3 –±–∞–π—Ç–∞ + 1 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π
    print!("    [");
    for i in 8..11 {
        let encoded = part2_bytes[i] ^ 0x3B;
        print!("0x{:02X}", encoded);
        if i < 10 { print!(", "); }
    }
    println!(", 0x00]"); // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –Ω—É–ª–µ–≤–æ–π –±–∞–π—Ç
    println!("];");

    // Base64 –¥–ª—è —á–∞—Å—Ç–∏ 3
    println!("\nüé® UI_LOCALIZATION_STRINGS (Base64):");
    // –ü—Ä–æ—Å—Ç–æ–µ base64 –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Å—Ç–∏ 3
    let part3_bytes = part3.as_bytes();
    let base64_encoded = base64_encode(part3_bytes);
    println!("Base64 —Å—Ç—Ä–æ–∫–∞ –¥–ª—è '{}': {}", part3, base64_encoded);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —á–∞—Å—Ç–∏ 4
    println!("\nüî¢ CRYPTO_MATH_SEEDS (u64 –º–∞—Å—Å–∏–≤):");
    println!("–ß–∞—Å—Ç—å 4: {}", part4);
    
    // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –¥–≤–∞ u64
    let part4_bytes: Vec<u8> = part4.bytes().collect();
    
    // –ü–µ—Ä–≤—ã–µ 8 —Å–∏–º–≤–æ–ª–æ–≤ -> u64
    let mut bytes1 = [0u8; 8];
    for i in 0..8.min(part4_bytes.len()) {
        bytes1[i] = part4_bytes[i];
    }
    let seed1 = u64::from_be_bytes(bytes1);
    
    // –û—Å—Ç–∞–≤—à–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã -> u64
    let mut bytes2 = [0u8; 8];
    for i in 8..part4_bytes.len() {
        bytes2[i-8] = part4_bytes[i];
    }
    let seed2 = u64::from_be_bytes(bytes2);
    
    println!("const CRYPTO_MATH_SEEDS: [u64; 6] = [");
    println!("    0x{:016X}, // –ø–µ—Ä–≤–∞—è —á–∞—Å—Ç—å: {}", seed1, &part4[0..8.min(part4.len())]);
    println!("    0x{:016X}, // –≤—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å: {}", seed2, &part4[8..]);
    println!("    0x1234567890ABCDF1, // –º—É—Å–æ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ");
    println!("    0x1234567890ABCDF2, // –º—É—Å–æ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ");
    println!("    0x1234567890ABCDF3, // –º—É—Å–æ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ");
    println!("    0x1234567890ABCDF4  // –º—É—Å–æ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ");
    println!("];");
}

// –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è base64 encoding
fn base64_encode(input: &[u8]) -> String {
    const CHARS: &[u8] = b"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    let mut result = String::new();
    
    for chunk in input.chunks(3) {
        let mut buf = [0u8; 3];
        for (i, &byte) in chunk.iter().enumerate() {
            buf[i] = byte;
        }
        
        let b = ((buf[0] as u32) << 16) | ((buf[1] as u32) << 8) | (buf[2] as u32);
        
        result.push(CHARS[((b >> 18) & 63) as usize] as char);
        result.push(CHARS[((b >> 12) & 63) as usize] as char);
        result.push(if chunk.len() > 1 { CHARS[((b >> 6) & 63) as usize] as char } else { '=' });
        result.push(if chunk.len() > 2 { CHARS[(b & 63) as usize] as char } else { '=' });
    }
    
    result
}