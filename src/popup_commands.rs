use anyhow::{Result, Context};
use tokio::process::Command as AsyncCommand;

use crate::device_manager::DeviceManager;

/// –í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É /popup - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
pub async fn handle_popup_command(
    device_manager: &DeviceManager, 
    device_id: &str, 
    message: &str
) -> Result<String> {
    if !device_manager.is_valid_device_id(device_id) {
        return Err(anyhow::anyhow!("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å ID {} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", device_id));
    }

    device_manager.update_device_activity(device_id);
    
    #[cfg(windows)]
    {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º PowerShell –¥–ª—è –ø–æ–∫–∞–∑–∞ MessageBox
        let ps_script = format!(
            r#"
            Add-Type -AssemblyName System.Windows.Forms
            [System.Windows.Forms.MessageBox]::Show('{}', '–°–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ', [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Information)
            "#,
            message.replace("'", "''") // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏
        );
        
        let output = AsyncCommand::new("powershell")
            .args(&["-WindowStyle", "Hidden", "-Command", &ps_script])
            .output()
            .await
            .context("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å popup")?;
            
        if output.status.success() {
            Ok(format!("üí¨ Popup –ø–æ–∫–∞–∑–∞–Ω: '{}'", message))
        } else {
            let stderr = String::from_utf8_lossy(&output.stderr);
            Err(anyhow::anyhow!("–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ popup: {}", stderr))
        }
    }
    
    #[cfg(not(windows))]
    {
        // –î–ª—è Linux –ø–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã
        if let Ok(output) = AsyncCommand::new("zenity")
            .args(&["--info", "--text", message])
            .output()
            .await 
        {
            if output.status.success() {
                Ok(format!("üí¨ Popup –ø–æ–∫–∞–∑–∞–Ω: '{}'", message))
            } else {
                Err(anyhow::anyhow!("Zenity –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"))
            }
        } else if let Ok(output) = AsyncCommand::new("notify-send")
            .args(&["–°–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", message])
            .output()
            .await 
        {
            if output.status.success() {
                Ok(format!("üí¨ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: '{}'", message))
            } else {
                Err(anyhow::anyhow!("notify-send –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"))
            }
        } else {
            Err(anyhow::anyhow!("Popup –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞ —ç—Ç–æ–π —Å–∏—Å—Ç–µ–º–µ"))
        }
    }
}

/// –í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É /popup —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ (—Ç–∏–ø, –∑–∞–≥–æ–ª–æ–≤–æ–∫)
pub async fn handle_popup_advanced_command(
    device_manager: &DeviceManager, 
    device_id: &str, 
    title: &str,
    message: &str,
    popup_type: PopupType
) -> Result<String> {
    if !device_manager.is_valid_device_id(device_id) {
        return Err(anyhow::anyhow!("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å ID {} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", device_id));
    }

    device_manager.update_device_activity(device_id);
    
    #[cfg(windows)]
    {
        let (icon, buttons) = match popup_type {
            PopupType::Info => ("Information", "OK"),
            PopupType::Warning => ("Warning", "OK"),
            PopupType::Error => ("Error", "OK"),
            PopupType::Question => ("Question", "YesNo"),
        };
        
        let ps_script = format!(
            r#"
            Add-Type -AssemblyName System.Windows.Forms
            $result = [System.Windows.Forms.MessageBox]::Show('{}', '{}', [System.Windows.Forms.MessageBoxButtons]::{}, [System.Windows.Forms.MessageBoxIcon]::{})
            Write-Output "Result: $result"
            "#,
            message.replace("'", "''"),
            title.replace("'", "''"),
            buttons,
            icon
        );
        
        let output = AsyncCommand::new("powershell")
            .args(&["-WindowStyle", "Hidden", "-Command", &ps_script])
            .output()
            .await
            .context("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å popup")?;
            
        if output.status.success() {
            let result_output = String::from_utf8_lossy(&output.stdout);
            
            if let Some(result_line) = result_output.lines().find(|line| line.starts_with("Result:")) {
                let user_choice = result_line.replace("Result:", "").trim().to_string();
                Ok(format!("üí¨ Popup '{}' –ø–æ–∫–∞–∑–∞–Ω. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª: {}", title, user_choice))
            } else {
                Ok(format!("üí¨ Popup '{}' –ø–æ–∫–∞–∑–∞–Ω", title))
            }
        } else {
            let stderr = String::from_utf8_lossy(&output.stderr);
            Err(anyhow::anyhow!("–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ popup: {}", stderr))
        }
    }
    
    #[cfg(not(windows))]
    {
        // –î–ª—è Linux –∏—Å–ø–æ–ª—å–∑—É–µ–º zenity —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏
        let zenity_type = match popup_type {
            PopupType::Info => "--info",
            PopupType::Warning => "--warning", 
            PopupType::Error => "--error",
            PopupType::Question => "--question",
        };
        
        if let Ok(output) = AsyncCommand::new("zenity")
            .args(&[zenity_type, "--title", title, "--text", message])
            .output()
            .await 
        {
            if output.status.success() {
                Ok(format!("üí¨ Popup '{}' –ø–æ–∫–∞–∑–∞–Ω", title))
            } else {
                Err(anyhow::anyhow!("Zenity –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"))
            }
        } else {
            Err(anyhow::anyhow!("Popup –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞ —ç—Ç–æ–π —Å–∏—Å—Ç–µ–º–µ"))
        }
    }
}

/// –í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
pub async fn handle_critical_popup_command(
    device_manager: &DeviceManager, 
    device_id: &str, 
    message: &str
) -> Result<String> {
    if !device_manager.is_valid_device_id(device_id) {
        return Err(anyhow::anyhow!("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å ID {} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", device_id));
    }

    device_manager.update_device_activity(device_id);
    
    #[cfg(windows)]
    {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        let ps_script = format!(
            r#"
            Add-Type -AssemblyName System.Windows.Forms
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º—É –ø–æ–≤–µ—Ä—Ö –≤—Å–µ—Ö –æ–∫–æ–Ω
            $form = New-Object System.Windows.Forms.Form
            $form.Text = '–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –°–ò–°–¢–ï–ú–ù–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï'
            $form.Size = New-Object System.Drawing.Size(500,200)
            $form.StartPosition = 'CenterScreen'
            $form.TopMost = $true
            $form.FormBorderStyle = 'FixedDialog'
            $form.MaximizeBox = $false
            $form.MinimizeBox = $false
            $form.BackColor = 'Red'
            $form.ForeColor = 'White'
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
            $label = New-Object System.Windows.Forms.Label
            $label.Text = '{}'
            $label.Size = New-Object System.Drawing.Size(460,100)
            $label.Location = New-Object System.Drawing.Point(20,20)
            $label.Font = New-Object System.Drawing.Font('Arial', 12, [System.Drawing.FontStyle]::Bold)
            $label.TextAlign = 'MiddleCenter'
            $form.Controls.Add($label)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
            $button = New-Object System.Windows.Forms.Button
            $button.Text = '–ü–û–ù–Ø–¢–ù–û'
            $button.Size = New-Object System.Drawing.Size(100,30)
            $button.Location = New-Object System.Drawing.Point(200,130)
            $button.Add_Click({{ $form.Close() }})
            $form.Controls.Add($button)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
            $form.ShowDialog()
            "#,
            message.replace("'", "''")
        );
        
        let output = AsyncCommand::new("powershell")
            .args(&["-WindowStyle", "Hidden", "-Command", &ps_script])
            .output()
            .await
            .context("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")?;
            
        if output.status.success() {
            Ok(format!("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–æ: '{}'", message))
        } else {
            let stderr = String::from_utf8_lossy(&output.stderr);
            Err(anyhow::anyhow!("–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {}", stderr))
        }
    }
    
    #[cfg(not(windows))]
    {
        // –î–ª—è Linux –∏—Å–ø–æ–ª—å–∑—É–µ–º zenity —Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º —Ç–∏–ø–æ–º
        if let Ok(output) = AsyncCommand::new("zenity")
            .args(&["--error", "--title", "–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –°–ò–°–¢–ï–ú–ù–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï", "--text", message])
            .output()
            .await 
        {
            if output.status.success() {
                Ok(format!("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–æ: '{}'", message))
            } else {
                Err(anyhow::anyhow!("Zenity –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"))
            }
        } else {
            Err(anyhow::anyhow!("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –Ω–∞ —ç—Ç–æ–π —Å–∏—Å—Ç–µ–º–µ"))
        }
    }
}

/// –¢–∏–ø—ã popup –æ–∫–æ–Ω
#[derive(Debug, Clone)]
pub enum PopupType {
    Info,
    Warning,
    Error,
    Question,
}