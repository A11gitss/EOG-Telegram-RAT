use std::fs;
use std::path::{Path, PathBuf};
use anyhow::{Result, Context};
use tokio::fs as async_fs;

use crate::device_manager::DeviceManager;
use crate::config::{is_path_safe, MAX_FILE_SIZE, TEMP_DIR};

/// –í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É /listdirs - –ø–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
pub async fn handle_listdirs_command(
    device_manager: &DeviceManager,
    device_id: &str,
    path: &str,
) -> Result<String> {
    if !device_manager.is_valid_device_id(device_id) {
        return Ok(format!("‚ùå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å ID `{}` –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", device_id));
    }

    if !is_path_safe(path) {
        return Ok("‚ùå –£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ–±–µ–∑–æ–ø–∞—Å–µ–Ω".to_string());
    }

    device_manager.update_device_activity(device_id);

    match list_directories(path).await {
        Ok(dirs) => Ok(format_directories_list(path, &dirs)),
        Err(e) => Ok(format!("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–∞–ø–æ–∫: {}", e))
    }
}

/// –í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É /listfiles - –ø–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
pub async fn handle_listfiles_command(
    device_manager: &DeviceManager,
    device_id: &str,
    path: &str,
) -> Result<String> {
    if !device_manager.is_valid_device_id(device_id) {
        return Ok(format!("‚ùå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å ID `{}` –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", device_id));
    }

    if !is_path_safe(path) {
        return Ok("‚ùå –£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ–±–µ–∑–æ–ø–∞—Å–µ–Ω".to_string());
    }

    device_manager.update_device_activity(device_id);

    match list_files(path).await {
        Ok(files) => Ok(format_files_list(path, &files)),
        Err(e) => Ok(format!("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: {}", e))
    }
}

/// –í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É /download - –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
pub async fn handle_download_command(
    device_manager: &DeviceManager,
    device_id: &str,
    file_path: &str,
) -> Result<(String, Vec<u8>)> {
    if !device_manager.is_valid_device_id(device_id) {
        return Err(anyhow::anyhow!("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å ID {} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", device_id));
    }

    if !is_path_safe(file_path) {
        return Err(anyhow::anyhow!("–£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ–±–µ–∑–æ–ø–∞—Å–µ–Ω"));
    }

    device_manager.update_device_activity(device_id);

    let path = Path::new(file_path);
    
    if !path.exists() {
        return Err(anyhow::anyhow!("–§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {}", file_path));
    }

    if !path.is_file() {
        return Err(anyhow::anyhow!("–£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–∞–π–ª–æ–º"));
    }

    let metadata = fs::metadata(path)
        .context("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ")?;

    if metadata.len() > MAX_FILE_SIZE as u64 {
        return Err(anyhow::anyhow!(
            "–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({} –±–∞–π—Ç). –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {} –±–∞–π—Ç",
            metadata.len(),
            MAX_FILE_SIZE
        ));
    }

    let file_data = async_fs::read(path).await
        .context("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª")?;

    let file_name = path.file_name()
        .and_then(|n| n.to_str())
        .unwrap_or("unknown_file")
        .to_string();

    Ok((file_name, file_data))
}

/// –í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É /upload - —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
pub async fn handle_upload_command(
    device_manager: &DeviceManager,
    device_id: &str,
    target_path: &str,
    file_data: Vec<u8>,
    file_name: &str,
) -> Result<String> {
    if !device_manager.is_valid_device_id(device_id) {
        return Ok(format!("‚ùå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å ID `{}` –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", device_id));
    }

    if !is_path_safe(target_path) {
        return Ok("‚ùå –£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ–±–µ–∑–æ–ø–∞—Å–µ–Ω".to_string());
    }

    if file_data.len() > MAX_FILE_SIZE {
        return Ok(format!(
            "‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({} –±–∞–π—Ç). –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {} –±–∞–π—Ç",
            file_data.len(),
            MAX_FILE_SIZE
        ));
    }

    device_manager.update_device_activity(device_id);

    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
    let target_dir = Path::new(target_path);
    let full_path = target_dir.join(file_name);

    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if let Some(parent) = full_path.parent() {
        if let Err(e) = fs::create_dir_all(parent) {
            return Ok(format!("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: {}", e));
        }
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    match async_fs::write(&full_path, &file_data).await {
        Ok(_) => {
            let size_str = format_file_size(file_data.len() as u64);
            Ok(format!(
                "‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω:\n\
                üìÅ **–ü—É—Ç—å:** `{}`\n\
                üìÑ **–†–∞–∑–º–µ—Ä:** {}\n\
                üïê **–í—Ä–µ–º—è:** {}",
                full_path.display(),
                size_str,
                chrono::Utc::now().format("%Y-%m-%d %H:%M:%S UTC")
            ))
        }
        Err(e) => Ok(format!("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {}", e))
    }
}

/// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
#[derive(Debug)]
struct DirectoryInfo {
    name: String,
    path: PathBuf,
    is_accessible: bool,
    item_count: Option<usize>,
    modified: Option<chrono::DateTime<chrono::Utc>>,
}

/// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ
#[derive(Debug)]
struct FileInfo {
    name: String,
    path: PathBuf,
    size: u64,
    extension: Option<String>,
    modified: Option<chrono::DateTime<chrono::Utc>>,
    is_hidden: bool,
    is_readonly: bool,
}

/// –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
async fn list_directories(path: &str) -> Result<Vec<DirectoryInfo>> {
    let dir_path = Path::new(path);
    
    if !dir_path.exists() {
        return Err(anyhow::anyhow!("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"));
    }

    if !dir_path.is_dir() {
        return Err(anyhow::anyhow!("–£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π"));
    }

    let mut directories = Vec::new();
    let mut entries = async_fs::read_dir(dir_path).await
        .context("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é")?;

    while let Some(entry) = entries.next_entry().await? {
        let path = entry.path();
        
        if path.is_dir() {
            let name = entry.file_name().to_string_lossy().to_string();
            
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            let item_count = match async_fs::read_dir(&path).await {
                Ok(mut sub_entries) => {
                    let mut count = 0;
                    while sub_entries.next_entry().await?.is_some() {
                        count += 1;
                    }
                    Some(count)
                }
                Err(_) => None,
            };

            // –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
            let modified = entry.metadata().await.ok()
                .and_then(|m| m.modified().ok())
                .and_then(|t| chrono::DateTime::from_timestamp(
                    t.duration_since(std::time::UNIX_EPOCH).ok()?.as_secs() as i64, 0
                ));

            directories.push(DirectoryInfo {
                name,
                path: path.clone(),
                is_accessible: item_count.is_some(),
                item_count,
                modified,
            });
        }
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–º–µ–Ω–∏
    directories.sort_by(|a, b| a.name.to_lowercase().cmp(&b.name.to_lowercase()));

    Ok(directories)
}

/// –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
async fn list_files(path: &str) -> Result<Vec<FileInfo>> {
    let dir_path = Path::new(path);
    
    if !dir_path.exists() {
        return Err(anyhow::anyhow!("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"));
    }

    if !dir_path.is_dir() {
        return Err(anyhow::anyhow!("–£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π"));
    }

    let mut files = Vec::new();
    let mut entries = async_fs::read_dir(dir_path).await
        .context("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é")?;

    while let Some(entry) = entries.next_entry().await? {
        let path = entry.path();
        
        if path.is_file() {
            let name = entry.file_name().to_string_lossy().to_string();
            
            let metadata = entry.metadata().await.ok();
            let size = metadata.as_ref().map(|m| m.len()).unwrap_or(0);
            
            let extension = path.extension()
                .and_then(|ext| ext.to_str())
                .map(|s| s.to_lowercase());

            let modified = metadata.as_ref()
                .and_then(|m| m.modified().ok())
                .and_then(|t| chrono::DateTime::from_timestamp(
                    t.duration_since(std::time::UNIX_EPOCH).ok()?.as_secs() as i64, 0
                ));

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã —Ñ–∞–π–ª–∞ (Windows specific)
            let (is_hidden, is_readonly) = get_file_attributes(&path);

            files.push(FileInfo {
                name,
                path: path.clone(),
                size,
                extension,
                modified,
                is_hidden,
                is_readonly,
            });
        }
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–º–µ–Ω–∏
    files.sort_by(|a, b| a.name.to_lowercase().cmp(&b.name.to_lowercase()));

    Ok(files)
}

/// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
fn format_directories_list(base_path: &str, directories: &[DirectoryInfo]) -> String {
    let mut result = format!("üìÅ **–ü–∞–ø–∫–∏ –≤:** `{}`\n\n", base_path);

    if directories.is_empty() {
        result.push_str("üì≠ –í —ç—Ç–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–µ—Ç –ø–∞–ø–æ–∫");
        return result;
    }

    for dir in directories {
        let accessibility_icon = if dir.is_accessible { "üîì" } else { "üîí" };
        let item_count_str = match dir.item_count {
            Some(count) => format!("{} —ç–ª–µ–º–µ–Ω—Ç–æ–≤", count),
            None => "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ".to_string(),
        };

        let modified_str = dir.modified
            .map(|m| m.format("%Y-%m-%d %H:%M").to_string())
            .unwrap_or_else(|| "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ".to_string());

        result.push_str(&format!(
            "{} **{}**\n\
            ‚îî üìä {} | üïê {}\n\n",
            accessibility_icon,
            dir.name,
            item_count_str,
            modified_str
        ));
    }

    result.push_str(&format!("\nüìà **–í—Å–µ–≥–æ –ø–∞–ø–æ–∫:** {}", directories.len()));
    result
}

/// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
fn format_files_list(base_path: &str, files: &[FileInfo]) -> String {
    let mut result = format!("üìÑ **–§–∞–π–ª—ã –≤:** `{}`\n\n", base_path);

    if files.is_empty() {
        result.push_str("üì≠ –í —ç—Ç–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤");
        return result;
    }

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    let mut extension_stats: std::collections::HashMap<String, (usize, u64)> = std::collections::HashMap::new();
    let mut total_size = 0u64;

    for file in files {
        let ext = file.extension.as_deref().unwrap_or("–±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è");
        let entry = extension_stats.entry(ext.to_string()).or_insert((0, 0));
        entry.0 += 1;
        entry.1 += file.size;
        total_size += file.size;

        let size_str = format_file_size(file.size);
        let modified_str = file.modified
            .map(|m| m.format("%Y-%m-%d %H:%M").to_string())
            .unwrap_or_else(|| "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ".to_string());

        let mut attributes = Vec::new();
        if file.is_hidden {
            attributes.push("üôà");
        }
        if file.is_readonly {
            attributes.push("üîí");
        }
        let attributes_str = if attributes.is_empty() {
            String::new()
        } else {
            format!(" {}", attributes.join(""))
        };

        let extension_icon = get_file_icon(&file.extension);

        result.push_str(&format!(
            "{} **{}**{}\n\
            ‚îî üìè {} | üïê {}\n\n",
            extension_icon,
            file.name,
            attributes_str,
            size_str,
            modified_str
        ));
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    result.push_str(&format!(
        "\nüìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n\
        üìà –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {}\n\
        üíæ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {}\n\n",
        files.len(),
        format_file_size(total_size)
    ));

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–ø–∞–º —Ñ–∞–π–ª–æ–≤
    if !extension_stats.is_empty() {
        result.push_str("**–ü–æ —Ç–∏–ø–∞–º —Ñ–∞–π–ª–æ–≤:**\n");
        let mut ext_vec: Vec<_> = extension_stats.into_iter().collect();
        ext_vec.sort_by(|a, b| b.1.0.cmp(&a.1.0)); // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É

        for (ext, (count, size)) in ext_vec.into_iter().take(5) {
            result.push_str(&format!(
                "‚Ä¢ {}: {} —à—Ç. ({})\n",
                ext.to_uppercase(),
                count,
                format_file_size(size)
            ));
        }
    }

    result
}

/// –ü–æ–ª—É—á–∞–µ—Ç –∞—Ç—Ä–∏–±—É—Ç—ã —Ñ–∞–π–ª–∞ (Windows specific)
fn get_file_attributes(path: &Path) -> (bool, bool) {
    #[cfg(windows)]
    {
        use std::os::windows::fs::MetadataExt;
        if let Ok(metadata) = fs::metadata(path) {
            let attributes = metadata.file_attributes();
            let is_hidden = (attributes & 0x2) != 0; // FILE_ATTRIBUTE_HIDDEN
            let is_readonly = (attributes & 0x1) != 0; // FILE_ATTRIBUTE_READONLY
            return (is_hidden, is_readonly);
        }
    }
    
    (false, false)
}

/// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∫–æ–Ω–∫—É –¥–ª—è —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
fn get_file_icon(extension: &Option<String>) -> &'static str {
    match extension.as_deref() {
        Some("txt") | Some("log") | Some("md") => "üìù",
        Some("pdf") => "üìÑ",
        Some("doc") | Some("docx") => "üìò",
        Some("xls") | Some("xlsx") => "üìä",
        Some("ppt") | Some("pptx") => "üìà",
        Some("jpg") | Some("jpeg") | Some("png") | Some("gif") | Some("bmp") => "üñºÔ∏è",
        Some("mp4") | Some("avi") | Some("mkv") | Some("mov") => "üé¨",
        Some("mp3") | Some("wav") | Some("flac") | Some("ogg") => "üéµ",
        Some("zip") | Some("rar") | Some("7z") | Some("tar") => "üì¶",
        Some("exe") | Some("msi") => "‚öôÔ∏è",
        Some("dll") | Some("sys") => "üîß",
        Some("bat") | Some("cmd") | Some("ps1") => "üíª",
        Some("py") => "üêç",
        Some("js") => "üìú",
        Some("html") | Some("htm") => "üåê",
        Some("css") => "üé®",
        _ => "üìÑ",
    }
}

/// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
fn format_file_size(size: u64) -> String {
    const UNITS: &[&str] = &["B", "KB", "MB", "GB", "TB"];
    
    if size == 0 {
        return "0 B".to_string();
    }

    let mut size_f = size as f64;
    let mut unit_index = 0;

    while size_f >= 1024.0 && unit_index < UNITS.len() - 1 {
        size_f /= 1024.0;
        unit_index += 1;
    }

    if unit_index == 0 {
        format!("{} {}", size, UNITS[unit_index])
    } else {
        format!("{:.1} {}", size_f, UNITS[unit_index])
    }
}

/// –°–æ–∑–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
pub fn ensure_temp_directory() -> Result<PathBuf> {
    let temp_path = Path::new(TEMP_DIR);
    if !temp_path.exists() {
        fs::create_dir_all(temp_path)
            .context("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é")?;
    }
    Ok(temp_path.to_path_buf())
}