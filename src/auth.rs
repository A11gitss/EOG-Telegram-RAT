use argon2::{Argon2, PasswordHash, PasswordHasher};
use argon2::password_hash::SaltString;
use anyhow::Result;
use std::collections::HashSet;
use once_cell::sync::Lazy;

/// –°–æ–ª—å –¥–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è ChatID (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω–æ–π) –ö—Ç–æ –ø—Ä–æ—á–∏—Ç–∞–ª —Ç–æ—Ç –≥–µ–π))))
const CHAT_SALT: &str = "eye_secure_chat_salt_2025";

/// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –Ω–∞–±–æ—Ä –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ö–µ—à–µ–π ChatID
static AUTHORIZED_HASHES: Lazy<HashSet<String>> = Lazy::new(|| {
    let mut hashes = HashSet::new();
    
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã–µ —Ö–µ—à–∏ –≤–∞—à–∏—Ö ChatID
    // –ü—Ä–∏–º–µ—Ä: –µ—Å–ª–∏ –≤–∞—à ChatID = 123456789, –≤—ã—á–∏—Å–ª–∏—Ç–µ –µ–≥–æ —Ö–µ—à –∏ –¥–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞
    
    // –†–ï–ê–õ–¨–ù–´–ô –•–ï–® –î–õ–Ø CHAT_ID 7987854520
    hashes.insert("$argon2id$v=19$m=19456,t=2,p=1$ZXllX3NlY3VyZV9jaGF0X3NhbHRfMjAyNQ$cikLXG768AOMlC9Ymt682RwKB6iSVgo9l4xAYN3ViB8".to_string());
    
    // –ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ö–µ—à–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:
    // hashes.insert("$argon2id$v=19$m=19456,t=2,p=1$...".to_string());
    
    hashes
});

/// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
pub struct AuthManager {
    argon2: Argon2<'static>,
}

impl AuthManager {
    /// –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä AuthManager
    pub fn new() -> Self {
        Self {
            argon2: Argon2::default(),
        }
    }
    
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç Argon2 —Ö–µ—à –¥–ª—è ChatID (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
    pub fn generate_chat_hash(&self, chat_id: i64) -> Result<String> {
        // –°–æ–∑–¥–∞–µ–º —Å–æ–ª—å –∏–∑ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
        let salt_bytes = CHAT_SALT.as_bytes();
        let salt = SaltString::encode_b64(salt_bytes)
            .map_err(|e| anyhow::anyhow!("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–ª–∏: {}", e))?;
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ChatID –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
        let chat_id_str = chat_id.to_string();
        let password_hash = self.argon2
            .hash_password(chat_id_str.as_bytes(), &salt)
            .map_err(|e| anyhow::anyhow!("–û—à–∏–±–∫–∞ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è: {}", e))?;
        
        Ok(password_hash.to_string())
    }
    
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é ChatID —á–µ—Ä–µ–∑ —Ö–µ—à
    pub fn is_authorized_chat(&self, chat_id: i64) -> bool {
        // –í—ã—á–∏—Å–ª—è–µ–º —Ö–µ—à –¥–ª—è –≤—Ö–æ–¥—è—â–µ–≥–æ ChatID
        match self.compute_chat_hash(chat_id) {
            Ok(computed_hash) => {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π —Ö–µ—à –≤ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö
                AUTHORIZED_HASHES.iter().any(|authorized_hash| {
                    self.verify_hash(&computed_hash, authorized_hash)
                })
            }
            Err(_) => false,
        }
    }
    
    /// –í—ã—á–∏—Å–ª—è–µ—Ç —Ö–µ—à –¥–ª—è ChatID (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥)
    fn compute_chat_hash(&self, chat_id: i64) -> Result<String> {
        let salt_bytes = CHAT_SALT.as_bytes();
        let salt = SaltString::encode_b64(salt_bytes)
            .map_err(|e| anyhow::anyhow!("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–ª–∏: {}", e))?;
        
        let chat_id_str = chat_id.to_string();
        let password_hash = self.argon2
            .hash_password(chat_id_str.as_bytes(), &salt)
            .map_err(|e| anyhow::anyhow!("–û—à–∏–±–∫–∞ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è: {}", e))?;
        
        Ok(password_hash.to_string())
    }
    
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ö–µ—à–µ–π
    fn verify_hash(&self, computed_hash: &str, stored_hash: &str) -> bool {
        if let (Ok(computed), Ok(stored)) = (
            PasswordHash::new(computed_hash),
            PasswordHash::new(stored_hash)
        ) {
            // Compare hashes –±–µ–∑ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            computed.hash == stored.hash && computed.salt == stored.salt
        } else {
            false
        }
    }
    
    /// –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ö–µ—à (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è)
    pub fn add_authorized_hash(&self, hash: String) -> Result<()> {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –∑–∞–ø–∏—Å—å –≤ –∑–∞—â–∏—â–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        // –î–ª—è —ç—Ç–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç —Ö–µ—à–∞
        PasswordHash::new(&hash)
            .map_err(|e| anyhow::anyhow!("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ö–µ—à–∞: {}", e))?;
        
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª/—Ä–µ–µ—Å—Ç—Ä
        println!("üîê –ù–æ–≤—ã–π —Ö–µ—à –≥–æ—Ç–æ–≤ –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é: {}", hash);
        Ok(())
    }
    
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Ö–µ—à–µ–π –¥–ª—è –º–∞—Å—Å–∏–≤–∞ ChatID (–¥–ª—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
    pub fn generate_hashes_for_chats(&self, chat_ids: &[i64]) -> Result<Vec<String>> {
        let mut hashes = Vec::new();
        
        for &chat_id in chat_ids {
            let hash = self.generate_chat_hash(chat_id)?;
            hashes.push(hash);
            
            // –û—á–∏—â–∞–µ–º ChatID –∏–∑ –ø–∞–º—è—Ç–∏ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            // (–≤ Rust —ç—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –Ω–æ –º—ã —ç—Ç–æ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–µ–º)
        }
        
        Ok(hashes)
    }
    
    /// –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ (placeholder –¥–ª—è –±—É–¥—É—â–∏—Ö —É–ª—É—á—à–µ–Ω–∏–π)
    pub fn secure_cleanup(&self) {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –æ—á–∏—Å—Ç–∫–∞ sensitive –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–∞–º—è—Ç–∏
        // Rust –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç –ø–∞–º—è—Ç—å—é, –Ω–æ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
        // –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ —Ç–∏–ø–∞ zeroize
    }
}

impl Default for AuthManager {
    fn default() -> Self {
        Self::new()
    }
}

/// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
pub static AUTH_MANAGER: Lazy<AuthManager> = Lazy::new(AuthManager::new);

/// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é ChatID (–≥–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–¥–µ)
pub fn is_authorized_chat(chat_id: i64) -> bool {
    AUTH_MANAGER.is_authorized_chat(chat_id)
}

/// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ö–µ—à –¥–ª—è ChatID (–¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
pub fn generate_chat_hash(chat_id: i64) -> Result<String> {
    AUTH_MANAGER.generate_chat_hash(chat_id)
}

/// –ü–æ–ª—É—á–∞–µ—Ç –ø–µ—Ä–≤—ã–π –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π chat_id –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
/// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–ø—É—Å–∫–µ/–∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏  
/// –í–ù–ò–ú–ê–ù–ò–ï: –§—É–Ω–∫—Ü–∏—è –¥–µ–∫–æ–¥–∏—Ä—É–µ—Ç ChatID –∏–∑ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —Ö–µ—à–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
pub fn get_notification_chat_id() -> Option<i64> {
    // –í–º–µ—Å—Ç–æ —Ö–∞—Ä–¥–∫–æ–¥–∞ ChatID, –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    // –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    
    // –ë–ï–ó–û–ü–ê–°–ù–´–ô –í–ê–†–ò–ê–ù–¢ 1: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if let Ok(chat_id_str) = std::env::var("EYE_NOTIFICATION_CHAT_ID") {
        if let Ok(chat_id) = chat_id_str.parse::<i64>() {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ—Ç ChatID –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω —á–µ—Ä–µ–∑ —Ö–µ—à
            if AUTH_MANAGER.is_authorized_chat(chat_id) {
                return Some(chat_id);
            }
        }
    }
    
    // –ë–ï–ó–û–ü–ê–°–ù–´–ô –í–ê–†–ò–ê–ù–¢ 2: –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
    // –î–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ª—É—á—à–µ –æ—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    // –∏ –ø–æ–ª—É—á–∞—Ç—å —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
    None
    
    // –ù–ï–ë–ï–ó–û–ü–ê–°–ù–û: –ü—Ä—è–º–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ ChatID
    // Some(7987854520) // ‚Üê –≠–¢–û –ù–ê–†–£–®–ê–ï–¢ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨!
}

#[cfg(test)]
mod tests {
    use super::*;
    
    #[test]
    fn test_hash_generation() {
        let auth = AuthManager::new();
        let test_chat_id = 123456789;
        
        // Generate hash
        let hash1 = auth.generate_chat_hash(test_chat_id).unwrap();
        let hash2 = auth.generate_chat_hash(test_chat_id).unwrap();
        
        // –•–µ—à–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ ChatID
        assert_eq!(hash1, hash2);
        
        // –•–µ—à –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π ChatID
        assert!(!hash1.contains("123456789"));
    }
    
    #[test]
    fn test_authorization() {
        let auth = AuthManager::new();
        
        // –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π —á–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω
        assert!(!auth.is_authorized_chat(999999999));
    }
}
