use std::sync::Arc;
use anyhow::Result;

mod config_minimal;
mod device_manager_minimal;
mod telegram_client_minimal;

use config_minimal::{BOT_TOKEN, AUTHORIZED_CHAT_ID, validate_config};
use device_manager_minimal::DeviceManager;
use telegram_client_minimal::TelegramClient;

#[tokio::main]
async fn main() -> Result<()> {
    env_logger::init();
    
    println!("üöÄ Eye Remote Admin Bot - Minimal Version");
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if let Err(e) = validate_config() {
        eprintln!("‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {}", e);
        return Ok(());
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    let device_manager = Arc::new(DeviceManager::new());
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    match device_manager.initialize_current_device().await {
        Ok(device_id) => {
            println!("‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å ID: {}", device_id);
        }
        Err(e) => {
            eprintln!("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {}", e);
            return Ok(());
        }
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –∫–ª–∏–µ–Ω—Ç–∞
    let telegram_client = TelegramClient::new();
    
    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
    if let Some(device) = device_manager.get_current_device() {
        let startup_message = format!(
            "üü¢ **Eye Remote Admin Bot –∑–∞–ø—É—â–µ–Ω**\nüì± ID: `{}`\nüíª –ò–º—è: `{}`",
            device.device_id,
            device.device_name
        );
        
        if let Err(e) = telegram_client.send_message(AUTHORIZED_CHAT_ID, &startup_message).await {
            eprintln!("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {}", e);
        }
    }
    
    println!("ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)");
    println!("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /devices, /info, /help");
    println!("üí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C");
    
    // –ü—Ä–æ—Å—Ç–æ–π loop –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã
    loop {
        tokio::time::sleep(tokio::time::Duration::from_secs(10)).await;
        println!("‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω...");
    }
}